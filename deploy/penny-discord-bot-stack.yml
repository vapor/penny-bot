Description: CF Stack for the Penny Discord Bot

Parameters:
  apiGatewayName:
    Type: String
    Default: penny-bot-api
  UsersFilename:
    Type: String
    Description: Filename containing the code to be executed for users
    Default: UsersLambda
  SponsorsFilename:
    Type: String
    Description: Filename containing the code to be executed when a new sponsor joins
    Default: SponsorsLambda
  AutoPingsFilename:
    Type: String
    Description: Filename containing the code to be executed for auto-pings
    Default: AutoPingsLambda
  FaqsFilename:
    Type: String
    Description: Filename containing the code to be executed for faqs
    Default: FaqsLambda
  AutoFaqsFilename:
    Type: String
    Description: Filename containing the code to be executed for faqs
    Default: AutoFaqsLambda
  GHHooksFilename:
    Type: String
    Description: Filename containing the code to be executed for gh-hooks
    Default: GHHooksLambda
  GHOAuthFilename:
    Type: String
    Description: Filename containing the code to be executed for gh-oauth
    Default: GHOAuthLambda
  VPC:
    Description: VPC for the app
    Type: AWS::EC2::VPC::Id
    Default: vpc-08d1e66947d6200d6
  Subnet:
    Description: Subnet for the app
    Type: AWS::EC2::Subnet::Id
    Default: subnet-088d7192c6c67e077
  TaskDefinition:
    Description: Task def for the ECS task
    Type: String

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${apiGatewayName}-Cluster"
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ["-", [!Ref apiGatewayName, SecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", [/ecs, !Ref apiGatewayName]]
      RetentionInDays: 3
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: Penny-Bot
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet
          SecurityGroups:
            - !Ref AppSecurityGroup

  apiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref apiGatewayName
      Description: API Endpoints for the discord Penny bot
      ProtocolType: HTTP

  apiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref apiGateway
      StageName: prod
      AutoDeploy: true

  apiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStage

  # Users lambda config

  usersIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Users Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt usersFunction.Arn
      PayloadFormatVersion: "2.0"

  usersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "POST /users"
      Target: !Sub "integrations/${usersIntegration}"

  usersFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-lambdas-store
        S3Key: !Sub ${UsersFilename}.zip
      Environment:
        Variables:
          API_BASE_URL: !Sub https://ncy6caaavg.execute-api.${AWS::Region}.amazonaws.com/prod
          LOG_LEVEL: debug
      FunctionName: !Sub ${UsersFilename}
      MemorySize: 256
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 20

  lambdaUsersRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${UsersFilename}
      Principal: apigateway.amazonaws.com
    DependsOn:
      - usersFunction

  usersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UsersFilename}
      RetentionInDays: 30

  # Sponsors lambda config

  sponsorsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Sponsor Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt sponsorsFunction.Arn
      PayloadFormatVersion: "2.0"

  sponsorsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "POST /sponsors"
      Target: !Sub "integrations/${sponsorsIntegration}"

  sponsorsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-lambdas-store
        S3Key: !Sub ${SponsorsFilename}.zip
      FunctionName: !Sub ${SponsorsFilename}
      MemorySize: 256
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 20

  lambdaSponsorsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${SponsorsFilename}
      Principal: apigateway.amazonaws.com
    DependsOn:
      - sponsorsFunction

  sponsorsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SponsorsFilename}
      RetentionInDays: 30

  # IAM roles

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:Scan
                  - lambda:UpdateFunctionCode
                  - lambda:InvokeFunction
                  - secretsmanager:GetSecretValue
                  - s3:PutObject
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - !GetAtt dynamoGHHooksMessageLookupTable.Arn
                  - !GetAtt dynamoPennyUserTable.Arn
                  - !GetAtt dynamoPennyCoinTable.Arn
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/penny-user-table
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/penny-user-table/*

                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/penny-coin-table
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/penny-coin-table/*

                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ghHooks-message-lookup-table
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ghHooks-message-lookup-table/*

                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UsersFilename}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${UsersFilename}

                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${SponsorsFilename}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SponsorsFilename}

                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AutoPingsFilename}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AutoPingsFilename}

                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FaqsFilename}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FaqsFilename}

                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AutoFaqsFilename}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AutoFaqsFilename}

                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${GHHooksFilename}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GHHooksFilename}

                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${GHOAuthFilename}:*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${GHOAuthFilename}

                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/discord-bot-token-VmhBXH
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/trigger-gh-readme-workflow-token-cpZwMv
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/github-webhook-secret-MASfKL
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/github-penny-app-client-secret-n8bwqN
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/penny/penny-bot/github-penny-app-private-key-vhi2WZ

                  - arn:aws:s3:::penny-auto-pings-lambda/*
                  - arn:aws:s3:::penny-faqs-lambda/*
                  - arn:aws:s3:::penny-auto-faqs-lambda/*
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/PennyLambda
      RetentionInDays: 30

  # Auto-pings lambda config

  autoPingsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Auto-Pings Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt autoPingsFunction.Arn
      PayloadFormatVersion: "2.0"

  autoPingsRouteGetAll:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "GET /auto-pings/all"
      Target: !Sub "integrations/${autoPingsIntegration}"

  autoPingsRouteAddForUser:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "PUT /auto-pings/users"
      Target: !Sub "integrations/${autoPingsIntegration}"

  autoPingsRouteDeleteForUser:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "DELETE /auto-pings/users"
      Target: !Sub "integrations/${autoPingsIntegration}"

  autoPingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-lambdas-store
        S3Key: !Sub ${AutoPingsFilename}.zip
      FunctionName: !Sub ${AutoPingsFilename}
      MemorySize: 256
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 20

  lambdaAutoPingsRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${AutoPingsFilename}
      Principal: apigateway.amazonaws.com
    DependsOn:
      - autoPingsFunction

  autoPingsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: penny-auto-pings-lambda

  autoPingsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AutoPingsFilename}
      RetentionInDays: 30

  # Faqs lambda config

  faqsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Faqs Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt faqsFunction.Arn
      PayloadFormatVersion: "2.0"

  faqsRoutePost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "POST /faqs"
      Target: !Sub "integrations/${faqsIntegration}"

  faqsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-lambdas-store
        S3Key: !Sub ${FaqsFilename}.zip
      FunctionName: !Sub ${FaqsFilename}
      MemorySize: 256
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 20

  lambdaFaqsRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${FaqsFilename}
      Principal: apigateway.amazonaws.com
    DependsOn:
      - faqsFunction

  faqsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: penny-faqs-lambda

  faqsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${FaqsFilename}
      RetentionInDays: 30

  # AutoFaqs lambda config

  autoFaqsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda Auto Faqs Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt autoFaqsFunction.Arn
      PayloadFormatVersion: "2.0"

  autoFaqsRoutePost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "POST /auto-faqs"
      Target: !Sub "integrations/${autoFaqsIntegration}"

  autoFaqsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-lambdas-store
        S3Key: !Sub ${AutoFaqsFilename}.zip
      FunctionName: !Sub ${AutoFaqsFilename}
      MemorySize: 256
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 20

  lambdaAutoFaqsRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${AutoFaqsFilename}
      Principal: apigateway.amazonaws.com
    DependsOn:
      - autoFaqsFunction

  autoFaqsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: penny-auto-faqs-lambda

  autoFaqsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AutoFaqsFilename}
      RetentionInDays: 30

  # GH-Hooks lambda config

  ghHooksIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda GHHooks Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt ghHooksFunction.Arn
      PayloadFormatVersion: "2.0"

  ghHooksRoutePost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "POST /gh-hooks"
      Target: !Sub "integrations/${ghHooksIntegration}"

  ghHooksFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-lambdas-store
        S3Key: !Sub ${GHHooksFilename}.zip
      Environment:
        Variables:
          BOT_TOKEN_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:177420307256:secret:prod/penny/penny-bot/discord-bot-token-VmhBXH
          WH_SECRET_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:177420307256:secret:prod/penny/penny-bot/github-webhook-secret-MASfKL
          GH_APP_AUTH_PRIV_KEY_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:177420307256:secret:prod/penny/penny-bot/github-penny-app-private-key-vhi2WZ
          API_BASE_URL: !Sub https://ncy6caaavg.execute-api.${AWS::Region}.amazonaws.com/prod
          LOG_LEVEL: debug
      FunctionName: !Sub ${GHHooksFilename}
      MemorySize: 512
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 30

  lambdaGHHooksRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${GHHooksFilename}
      Principal: apigateway.amazonaws.com
    DependsOn:
      - ghHooksFunction

  ghHooksLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GHHooksFilename}
      RetentionInDays: 30

  # GH-OAuth lambda config

  ghOAuthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      Description: Lambda GHOAuth Integration
      ApiId: !Ref apiGateway
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt ghOAuthFunction.Arn
      PayloadFormatVersion: "2.0"

  ghOAuthRoutePost:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: "GET /gh-oauth"
      Target: !Sub "integrations/${ghOAuthIntegration}"

  ghOAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: penny-lambdas-store
        S3Key: !Sub ${GHOAuthFilename}.zip
      Environment:
        Variables:
          BOT_TOKEN_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:177420307256:secret:prod/penny/penny-bot/discord-bot-token-VmhBXH
          GH_CLIENT_SECRET_ARN: !Sub arn:aws:secretsmanager:${AWS::Region}:177420307256:secret:prod/penny/penny-bot/github-penny-app-client-secret-n8bwqN
          GH_CLIENT_ID: Iv1.683ea075648a5cd2
          ACCOUNT_LINKING_OAUTH_FLOW_PUB_KEY: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFZlR5bkhvSnEwNHhOaVN1cmRGK0JpcXVyRDh1NQp1RjdGU2V4OGFNalhXTVpreFgrZ0d3U3lwazBIMExvQ2g0LzFKK1Vhbkp4MzhWVDIwMVJpa2RVZ25BPT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==
          API_BASE_URL: !Sub https://ncy6caaavg.execute-api.${AWS::Region}.amazonaws.com/prod
          LOG_LEVEL: trace
      FunctionName: !Sub ${GHOAuthFilename}
      MemorySize: 256
      Handler: handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: provided.al2
      Timeout: 20

  lambdaGHOAuthRoutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${GHOAuthFilename}
      Principal: apigateway.amazonaws.com
    DependsOn:
      - ghOAuthFunction

  ghOAuthLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GHOAuthFilename}
      RetentionInDays: 30

  # Caches S3 bucket

  cachesS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: penny-caches

  # DynamoDB user table

  dynamoPennyUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "penny-user-table"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "discordID"
          AttributeType: "S"
        - AttributeName: "githubID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: "D-ID-GSI"
          KeySchema:
            - AttributeName: "discordID"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
        - IndexName: "GH-ID-GSI"
          KeySchema:
            - AttributeName: "githubID"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # DynamoDB coin-entry table

  dynamoPennyCoinTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "penny-coin-table"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "createdAt"
          AttributeType: "N"
        - AttributeName: "fromUserID"
          AttributeType: "S"
        - AttributeName: "toUserID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "createdAt"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "FU-ID-GSI"
          KeySchema:
            - AttributeName: "fromUserID"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
        - IndexName: "TU-ID-GSI"
          KeySchema:
            - AttributeName: "toUserID"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # DynamoDB ghHooks-message-lookup table

  dynamoGHHooksMessageLookupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "ghHooks-message-lookup-table"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

Outputs:
  ghOAuthLambdaArn:
    Value: !GetAtt ghOAuthFunction.Arn

  ghHooksLambdaARN:
    Value: !GetAtt ghHooksFunction.Arn

  faqsLambdaARN:
    Value: !GetAtt faqsFunction.Arn

  autoFaqsLambdaARN:
    Value: !GetAtt autoFaqsFunction.Arn

  autoPingsLambdaARN:
    Value: !GetAtt autoPingsFunction.Arn

  sponsorsLambdaARN:
    Value: !GetAtt sponsorsFunction.Arn

  usersLambdaARN:
    Value: !GetAtt usersFunction.Arn

  pennyUserTableARN:
    Value: !GetAtt dynamoPennyUserTable.Arn

  pennyCoinTableARN:
    Value: !GetAtt dynamoPennyCoinTable.Arn

  ghHooksMessageLookupTableARN:
    Value: !GetAtt dynamoGHHooksMessageLookupTable.Arn
