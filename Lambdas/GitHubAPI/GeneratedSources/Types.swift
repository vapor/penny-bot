// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
package protocol APIProtocol: Sendable {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
    ///
    /// Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
    ///
    /// Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    func appsCreateInstallationAccessToken(_ input: Operations.AppsCreateInstallationAccessToken.Input) async throws -> Operations.AppsCreateInstallationAccessToken.Output
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    func projectsDeleteCard(_ input: Operations.ProjectsDeleteCard.Input) async throws -> Operations.ProjectsDeleteCard.Output
    /// Move a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    func projectsMoveCard(_ input: Operations.ProjectsMoveCard.Input) async throws -> Operations.ProjectsMoveCard.Output
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    func projectsListCards(_ input: Operations.ProjectsListCards.Input) async throws -> Operations.ProjectsListCards.Output
    /// Create a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    func projectsCreateCard(_ input: Operations.ProjectsCreateCard.Input) async throws -> Operations.ProjectsCreateCard.Output
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    /// | `verified_at` | `string` | The date the signature was verified by GitHub. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    func reposListCommits(_ input: Operations.ReposListCommits.Input) async throws -> Operations.ReposListCommits.Output
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    func reposListPullRequestsAssociatedWithCommit(_ input: Operations.ReposListPullRequestsAssociatedWithCommit.Input) async throws -> Operations.ReposListPullRequestsAssociatedWithCommit.Output
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    /// | `verified_at` | `string` | The date the signature was verified by GitHub. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    func reposCompareCommits(_ input: Operations.ReposCompareCommits.Input) async throws -> Operations.ReposCompareCommits.Output
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    func reposListContributors(_ input: Operations.ReposListContributors.Input) async throws -> Operations.ReposListContributors.Output
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    func issuesCreate(_ input: Operations.IssuesCreate.Input) async throws -> Operations.IssuesCreate.Output
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    func issuesGet(_ input: Operations.IssuesGet.Input) async throws -> Operations.IssuesGet.Output
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    /// - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    func pullsGet(_ input: Operations.PullsGet.Input) async throws -> Operations.PullsGet.Output
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    func pullsUpdate(_ input: Operations.PullsUpdate.Input) async throws -> Operations.PullsUpdate.Output
    /// List pull requests files
    ///
    /// Lists the files in a specified pull request.
    ///
    /// > [!NOTE]
    /// > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    func pullsListFiles(_ input: Operations.PullsListFiles.Input) async throws -> Operations.PullsListFiles.Output
    /// List reviews for a pull request
    ///
    /// Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    func pullsListReviews(_ input: Operations.PullsListReviews.Input) async throws -> Operations.PullsListReviews.Output
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    func reposListReleases(_ input: Operations.ReposListReleases.Input) async throws -> Operations.ReposListReleases.Output
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    func reposCreateRelease(_ input: Operations.ReposCreateRelease.Input) async throws -> Operations.ReposCreateRelease.Output
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    func reposGetLatestRelease(_ input: Operations.ReposGetLatestRelease.Input) async throws -> Operations.ReposGetLatestRelease.Output
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    func reposListTags(_ input: Operations.ReposListTags.Input) async throws -> Operations.ReposListTags.Output
    /// Get a user
    ///
    /// Provides publicly available information about someone with a GitHub account.
    ///
    /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
    ///
    /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".
    ///
    /// - Remark: HTTP `GET /users/{username}`.
    /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)`.
    func usersGetByUsername(_ input: Operations.UsersGetByUsername.Input) async throws -> Operations.UsersGetByUsername.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
    ///
    /// Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
    ///
    /// Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    package func appsCreateInstallationAccessToken(
        path: Operations.AppsCreateInstallationAccessToken.Input.Path,
        headers: Operations.AppsCreateInstallationAccessToken.Input.Headers = .init(),
        body: Operations.AppsCreateInstallationAccessToken.Input.Body? = nil
    ) async throws -> Operations.AppsCreateInstallationAccessToken.Output {
        try await appsCreateInstallationAccessToken(Operations.AppsCreateInstallationAccessToken.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    package func projectsDeleteCard(
        path: Operations.ProjectsDeleteCard.Input.Path,
        headers: Operations.ProjectsDeleteCard.Input.Headers = .init()
    ) async throws -> Operations.ProjectsDeleteCard.Output {
        try await projectsDeleteCard(Operations.ProjectsDeleteCard.Input(
            path: path,
            headers: headers
        ))
    }
    /// Move a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    package func projectsMoveCard(
        path: Operations.ProjectsMoveCard.Input.Path,
        headers: Operations.ProjectsMoveCard.Input.Headers = .init(),
        body: Operations.ProjectsMoveCard.Input.Body
    ) async throws -> Operations.ProjectsMoveCard.Output {
        try await projectsMoveCard(Operations.ProjectsMoveCard.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    package func projectsListCards(
        path: Operations.ProjectsListCards.Input.Path,
        query: Operations.ProjectsListCards.Input.Query = .init(),
        headers: Operations.ProjectsListCards.Input.Headers = .init()
    ) async throws -> Operations.ProjectsListCards.Output {
        try await projectsListCards(Operations.ProjectsListCards.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    package func projectsCreateCard(
        path: Operations.ProjectsCreateCard.Input.Path,
        headers: Operations.ProjectsCreateCard.Input.Headers = .init(),
        body: Operations.ProjectsCreateCard.Input.Body
    ) async throws -> Operations.ProjectsCreateCard.Output {
        try await projectsCreateCard(Operations.ProjectsCreateCard.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    /// | `verified_at` | `string` | The date the signature was verified by GitHub. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    package func reposListCommits(
        path: Operations.ReposListCommits.Input.Path,
        query: Operations.ReposListCommits.Input.Query = .init(),
        headers: Operations.ReposListCommits.Input.Headers = .init()
    ) async throws -> Operations.ReposListCommits.Output {
        try await reposListCommits(Operations.ReposListCommits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    package func reposListPullRequestsAssociatedWithCommit(
        path: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Path,
        query: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Query = .init(),
        headers: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Headers = .init()
    ) async throws -> Operations.ReposListPullRequestsAssociatedWithCommit.Output {
        try await reposListPullRequestsAssociatedWithCommit(Operations.ReposListPullRequestsAssociatedWithCommit.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    /// | `verified_at` | `string` | The date the signature was verified by GitHub. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    package func reposCompareCommits(
        path: Operations.ReposCompareCommits.Input.Path,
        query: Operations.ReposCompareCommits.Input.Query = .init(),
        headers: Operations.ReposCompareCommits.Input.Headers = .init()
    ) async throws -> Operations.ReposCompareCommits.Output {
        try await reposCompareCommits(Operations.ReposCompareCommits.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    package func reposListContributors(
        path: Operations.ReposListContributors.Input.Path,
        query: Operations.ReposListContributors.Input.Query = .init(),
        headers: Operations.ReposListContributors.Input.Headers = .init()
    ) async throws -> Operations.ReposListContributors.Output {
        try await reposListContributors(Operations.ReposListContributors.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    package func issuesCreate(
        path: Operations.IssuesCreate.Input.Path,
        headers: Operations.IssuesCreate.Input.Headers = .init(),
        body: Operations.IssuesCreate.Input.Body
    ) async throws -> Operations.IssuesCreate.Output {
        try await issuesCreate(Operations.IssuesCreate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    package func issuesGet(
        path: Operations.IssuesGet.Input.Path,
        headers: Operations.IssuesGet.Input.Headers = .init()
    ) async throws -> Operations.IssuesGet.Output {
        try await issuesGet(Operations.IssuesGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    /// - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    package func pullsGet(
        path: Operations.PullsGet.Input.Path,
        headers: Operations.PullsGet.Input.Headers = .init()
    ) async throws -> Operations.PullsGet.Output {
        try await pullsGet(Operations.PullsGet.Input(
            path: path,
            headers: headers
        ))
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    package func pullsUpdate(
        path: Operations.PullsUpdate.Input.Path,
        headers: Operations.PullsUpdate.Input.Headers = .init(),
        body: Operations.PullsUpdate.Input.Body? = nil
    ) async throws -> Operations.PullsUpdate.Output {
        try await pullsUpdate(Operations.PullsUpdate.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// List pull requests files
    ///
    /// Lists the files in a specified pull request.
    ///
    /// > [!NOTE]
    /// > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    package func pullsListFiles(
        path: Operations.PullsListFiles.Input.Path,
        query: Operations.PullsListFiles.Input.Query = .init(),
        headers: Operations.PullsListFiles.Input.Headers = .init()
    ) async throws -> Operations.PullsListFiles.Output {
        try await pullsListFiles(Operations.PullsListFiles.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List reviews for a pull request
    ///
    /// Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    package func pullsListReviews(
        path: Operations.PullsListReviews.Input.Path,
        query: Operations.PullsListReviews.Input.Query = .init(),
        headers: Operations.PullsListReviews.Input.Headers = .init()
    ) async throws -> Operations.PullsListReviews.Output {
        try await pullsListReviews(Operations.PullsListReviews.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    package func reposListReleases(
        path: Operations.ReposListReleases.Input.Path,
        query: Operations.ReposListReleases.Input.Query = .init(),
        headers: Operations.ReposListReleases.Input.Headers = .init()
    ) async throws -> Operations.ReposListReleases.Output {
        try await reposListReleases(Operations.ReposListReleases.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    package func reposCreateRelease(
        path: Operations.ReposCreateRelease.Input.Path,
        headers: Operations.ReposCreateRelease.Input.Headers = .init(),
        body: Operations.ReposCreateRelease.Input.Body
    ) async throws -> Operations.ReposCreateRelease.Output {
        try await reposCreateRelease(Operations.ReposCreateRelease.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    package func reposGetLatestRelease(
        path: Operations.ReposGetLatestRelease.Input.Path,
        headers: Operations.ReposGetLatestRelease.Input.Headers = .init()
    ) async throws -> Operations.ReposGetLatestRelease.Output {
        try await reposGetLatestRelease(Operations.ReposGetLatestRelease.Input(
            path: path,
            headers: headers
        ))
    }
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    package func reposListTags(
        path: Operations.ReposListTags.Input.Path,
        query: Operations.ReposListTags.Input.Query = .init(),
        headers: Operations.ReposListTags.Input.Headers = .init()
    ) async throws -> Operations.ReposListTags.Output {
        try await reposListTags(Operations.ReposListTags.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get a user
    ///
    /// Provides publicly available information about someone with a GitHub account.
    ///
    /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
    ///
    /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".
    ///
    /// - Remark: HTTP `GET /users/{username}`.
    /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)`.
    package func usersGetByUsername(
        path: Operations.UsersGetByUsername.Input.Path,
        headers: Operations.UsersGetByUsername.Input.Headers = .init()
    ) async throws -> Operations.UsersGetByUsername.Output {
        try await usersGetByUsername(Operations.UsersGetByUsername.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
package enum Servers {
    package enum Server1 {
        package static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.github.com",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    package static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.github.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
package enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    package enum Schemas {
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-user`.
        package struct SimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/simple-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/simple-user/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/followers_url`.
            package var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/following_url`.
            package var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/gists_url`.
            package var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_url`.
            package var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/subscriptions_url`.
            package var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/organizations_url`.
            package var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/received_events_url`.
            package var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/simple-user/site_admin`.
            package var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/simple-user/starred_at`.
            package var starredAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/simple-user/user_view_type`.
            package var userViewType: Swift.String?
            /// Creates a new `SimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            ///   - userViewType:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil,
                userViewType: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
                self.userViewType = userViewType
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
                case userViewType = "user_view_type"
            }
        }
        /// Basic Error
        ///
        /// - Remark: Generated from `#/components/schemas/basic-error`.
        package struct BasicError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/basic-error/message`.
            package var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/documentation_url`.
            package var documentationUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/basic-error/status`.
            package var status: Swift.String?
            /// Creates a new `BasicError`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentationUrl:
            ///   - url:
            ///   - status:
            package init(
                message: Swift.String? = nil,
                documentationUrl: Swift.String? = nil,
                url: Swift.String? = nil,
                status: Swift.String? = nil
            ) {
                self.message = message
                self.documentationUrl = documentationUrl
                self.url = url
                self.status = status
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentationUrl = "documentation_url"
                case url
                case status
            }
        }
        /// Validation Error Simple
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error-simple`.
        package struct ValidationErrorSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/documentation_url`.
            package var documentationUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error-simple/errors`.
            package var errors: [Swift.String]?
            /// Creates a new `ValidationErrorSimple`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentationUrl:
            ///   - errors:
            package init(
                message: Swift.String,
                documentationUrl: Swift.String,
                errors: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentationUrl = documentationUrl
                self.errors = errors
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentationUrl = "documentation_url"
                case errors
            }
        }
        /// A GitHub user.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-simple-user`.
        package struct NullableSimpleUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/followers_url`.
            package var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/following_url`.
            package var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/gists_url`.
            package var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_url`.
            package var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/subscriptions_url`.
            package var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/organizations_url`.
            package var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/received_events_url`.
            package var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/site_admin`.
            package var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/starred_at`.
            package var starredAt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-simple-user/user_view_type`.
            package var userViewType: Swift.String?
            /// Creates a new `NullableSimpleUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - starredAt:
            ///   - userViewType:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                login: Swift.String,
                id: Swift.Int64,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                starredAt: Swift.String? = nil,
                userViewType: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.starredAt = starredAt
                self.userViewType = userViewType
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case starredAt = "starred_at"
                case userViewType = "user_view_type"
            }
        }
        /// Scim Error
        ///
        /// - Remark: Generated from `#/components/schemas/scim-error`.
        package struct ScimError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/scim-error/message`.
            package var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/documentation_url`.
            package var documentationUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/detail`.
            package var detail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/status`.
            package var status: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/scim-error/scimType`.
            package var scimType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/scim-error/schemas`.
            package var schemas: [Swift.String]?
            /// Creates a new `ScimError`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentationUrl:
            ///   - detail:
            ///   - status:
            ///   - scimType:
            ///   - schemas:
            package init(
                message: Swift.String? = nil,
                documentationUrl: Swift.String? = nil,
                detail: Swift.String? = nil,
                status: Swift.Int? = nil,
                scimType: Swift.String? = nil,
                schemas: [Swift.String]? = nil
            ) {
                self.message = message
                self.documentationUrl = documentationUrl
                self.detail = detail
                self.status = status
                self.scimType = scimType
                self.schemas = schemas
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentationUrl = "documentation_url"
                case detail
                case status
                case scimType
                case schemas
            }
        }
        /// Validation Error
        ///
        /// - Remark: Generated from `#/components/schemas/validation-error`.
        package struct ValidationError: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/validation-error/message`.
            package var message: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/documentation_url`.
            package var documentationUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload`.
            package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/resource`.
                package var resource: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/field`.
                package var field: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/message`.
                package var message: Swift.String?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/code`.
                package var code: Swift.String
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/index`.
                package var index: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value`.
                @frozen package enum ValuePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value/case1`.
                    case case1(Swift.String?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value/case2`.
                    case case2(Swift.Int?)
                    /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value/case3`.
                    case case3([Swift.String]?)
                    package init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case3(try decoder.decodeFromSingleValueContainer())
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    package func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case2(value):
                            try encoder.encodeToSingleValueContainer(value)
                        case let .case3(value):
                            try encoder.encodeToSingleValueContainer(value)
                        }
                    }
                }
                /// - Remark: Generated from `#/components/schemas/validation-error/ErrorsPayload/value`.
                package var value: Components.Schemas.ValidationError.ErrorsPayloadPayload.ValuePayload?
                /// Creates a new `ErrorsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - resource:
                ///   - field:
                ///   - message:
                ///   - code:
                ///   - index:
                ///   - value:
                package init(
                    resource: Swift.String? = nil,
                    field: Swift.String? = nil,
                    message: Swift.String? = nil,
                    code: Swift.String,
                    index: Swift.Int? = nil,
                    value: Components.Schemas.ValidationError.ErrorsPayloadPayload.ValuePayload? = nil
                ) {
                    self.resource = resource
                    self.field = field
                    self.message = message
                    self.code = code
                    self.index = index
                    self.value = value
                }
                package enum CodingKeys: String, CodingKey {
                    case resource
                    case field
                    case message
                    case code
                    case index
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            package typealias ErrorsPayload = [Components.Schemas.ValidationError.ErrorsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/validation-error/errors`.
            package var errors: Components.Schemas.ValidationError.ErrorsPayload?
            /// Creates a new `ValidationError`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - documentationUrl:
            ///   - errors:
            package init(
                message: Swift.String,
                documentationUrl: Swift.String,
                errors: Components.Schemas.ValidationError.ErrorsPayload? = nil
            ) {
                self.message = message
                self.documentationUrl = documentationUrl
                self.errors = errors
            }
            package enum CodingKeys: String, CodingKey {
                case message
                case documentationUrl = "documentation_url"
                case errors
            }
        }
        /// The permissions granted to the user access token.
        ///
        /// - Remark: Generated from `#/components/schemas/app-permissions`.
        package struct AppPermissions: Codable, Hashable, Sendable {
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            @frozen package enum ActionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/actions`.
            package var actions: Components.Schemas.AppPermissions.ActionsPayload?
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            @frozen package enum AdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/administration`.
            package var administration: Components.Schemas.AppPermissions.AdministrationPayload?
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            @frozen package enum ChecksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for checks on code.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/checks`.
            package var checks: Components.Schemas.AppPermissions.ChecksPayload?
            /// The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/codespaces`.
            @frozen package enum CodespacesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/codespaces`.
            package var codespaces: Components.Schemas.AppPermissions.CodespacesPayload?
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            @frozen package enum ContentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/contents`.
            package var contents: Components.Schemas.AppPermissions.ContentsPayload?
            /// The leve of permission to grant the access token to manage Dependabot secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/dependabot_secrets`.
            @frozen package enum DependabotSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The leve of permission to grant the access token to manage Dependabot secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/dependabot_secrets`.
            package var dependabotSecrets: Components.Schemas.AppPermissions.DependabotSecretsPayload?
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            @frozen package enum DeploymentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for deployments and deployment statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/deployments`.
            package var deployments: Components.Schemas.AppPermissions.DeploymentsPayload?
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            @frozen package enum EnvironmentsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for managing repository environments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/environments`.
            package var environments: Components.Schemas.AppPermissions.EnvironmentsPayload?
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            @frozen package enum IssuesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/issues`.
            package var issues: Components.Schemas.AppPermissions.IssuesPayload?
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            @frozen package enum MetadataPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/metadata`.
            package var metadata: Components.Schemas.AppPermissions.MetadataPayload?
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            @frozen package enum PackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/packages`.
            package var packages: Components.Schemas.AppPermissions.PackagesPayload?
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            @frozen package enum PagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pages`.
            package var pages: Components.Schemas.AppPermissions.PagesPayload?
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            @frozen package enum PullRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/pull_requests`.
            package var pullRequests: Components.Schemas.AppPermissions.PullRequestsPayload?
            /// The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_custom_properties`.
            @frozen package enum RepositoryCustomPropertiesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_custom_properties`.
            package var repositoryCustomProperties: Components.Schemas.AppPermissions.RepositoryCustomPropertiesPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            @frozen package enum RepositoryHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_hooks`.
            package var repositoryHooks: Components.Schemas.AppPermissions.RepositoryHooksPayload?
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            @frozen package enum RepositoryProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/repository_projects`.
            package var repositoryProjects: Components.Schemas.AppPermissions.RepositoryProjectsPayload?
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            @frozen package enum SecretScanningAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage secret scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secret_scanning_alerts`.
            package var secretScanningAlerts: Components.Schemas.AppPermissions.SecretScanningAlertsPayload?
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            @frozen package enum SecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage repository secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/secrets`.
            package var secrets: Components.Schemas.AppPermissions.SecretsPayload?
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            @frozen package enum SecurityEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/security_events`.
            package var securityEvents: Components.Schemas.AppPermissions.SecurityEventsPayload?
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            @frozen package enum SingleFilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage just a single file.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/single_file`.
            package var singleFile: Components.Schemas.AppPermissions.SingleFilePayload?
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            @frozen package enum StatusesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for commit statuses.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/statuses`.
            package var statuses: Components.Schemas.AppPermissions.StatusesPayload?
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            @frozen package enum VulnerabilityAlertsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage Dependabot alerts.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/vulnerability_alerts`.
            package var vulnerabilityAlerts: Components.Schemas.AppPermissions.VulnerabilityAlertsPayload?
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            @frozen package enum WorkflowsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case write = "write"
            }
            /// The level of permission to grant the access token to update GitHub Actions workflow files.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/workflows`.
            package var workflows: Components.Schemas.AppPermissions.WorkflowsPayload?
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            @frozen package enum MembersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization teams and members.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/members`.
            package var members: Components.Schemas.AppPermissions.MembersPayload?
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            @frozen package enum OrganizationAdministrationPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage access to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_administration`.
            package var organizationAdministration: Components.Schemas.AppPermissions.OrganizationAdministrationPayload?
            /// The level of permission to grant the access token for custom repository roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            @frozen package enum OrganizationCustomRolesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom repository roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_roles`.
            package var organizationCustomRoles: Components.Schemas.AppPermissions.OrganizationCustomRolesPayload?
            /// The level of permission to grant the access token for custom organization roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_org_roles`.
            @frozen package enum OrganizationCustomOrgRolesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for custom organization roles management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_org_roles`.
            package var organizationCustomOrgRoles: Components.Schemas.AppPermissions.OrganizationCustomOrgRolesPayload?
            /// The level of permission to grant the access token for custom property management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_properties`.
            @frozen package enum OrganizationCustomPropertiesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token for custom property management.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_custom_properties`.
            package var organizationCustomProperties: Components.Schemas.AppPermissions.OrganizationCustomPropertiesPayload?
            /// The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_copilot_seat_management`.
            @frozen package enum OrganizationCopilotSeatManagementPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case write = "write"
            }
            /// The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_copilot_seat_management`.
            package var organizationCopilotSeatManagement: Components.Schemas.AppPermissions.OrganizationCopilotSeatManagementPayload?
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            @frozen package enum OrganizationAnnouncementBannersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_announcement_banners`.
            package var organizationAnnouncementBanners: Components.Schemas.AppPermissions.OrganizationAnnouncementBannersPayload?
            /// The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_events`.
            @frozen package enum OrganizationEventsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
            }
            /// The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_events`.
            package var organizationEvents: Components.Schemas.AppPermissions.OrganizationEventsPayload?
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            @frozen package enum OrganizationHooksPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_hooks`.
            package var organizationHooks: Components.Schemas.AppPermissions.OrganizationHooksPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            @frozen package enum OrganizationPersonalAccessTokensPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_tokens`.
            package var organizationPersonalAccessTokens: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokensPayload?
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            @frozen package enum OrganizationPersonalAccessTokenRequestsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_personal_access_token_requests`.
            package var organizationPersonalAccessTokenRequests: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokenRequestsPayload?
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            @frozen package enum OrganizationPlanPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
            }
            /// The level of permission to grant the access token for viewing an organization's plan.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_plan`.
            package var organizationPlan: Components.Schemas.AppPermissions.OrganizationPlanPayload?
            /// The level of permission to grant the access token to manage organization projects and projects public preview (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            @frozen package enum OrganizationProjectsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
                case admin = "admin"
            }
            /// The level of permission to grant the access token to manage organization projects and projects public preview (where available).
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_projects`.
            package var organizationProjects: Components.Schemas.AppPermissions.OrganizationProjectsPayload?
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            @frozen package enum OrganizationPackagesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_packages`.
            package var organizationPackages: Components.Schemas.AppPermissions.OrganizationPackagesPayload?
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            @frozen package enum OrganizationSecretsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage organization secrets.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_secrets`.
            package var organizationSecrets: Components.Schemas.AppPermissions.OrganizationSecretsPayload?
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            @frozen package enum OrganizationSelfHostedRunnersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_self_hosted_runners`.
            package var organizationSelfHostedRunners: Components.Schemas.AppPermissions.OrganizationSelfHostedRunnersPayload?
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            @frozen package enum OrganizationUserBlockingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage users blocked by the organization.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/organization_user_blocking`.
            package var organizationUserBlocking: Components.Schemas.AppPermissions.OrganizationUserBlockingPayload?
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            @frozen package enum TeamDiscussionsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage team discussions and related comments.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/team_discussions`.
            package var teamDiscussions: Components.Schemas.AppPermissions.TeamDiscussionsPayload?
            /// The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/email_addresses`.
            @frozen package enum EmailAddressesPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/email_addresses`.
            package var emailAddresses: Components.Schemas.AppPermissions.EmailAddressesPayload?
            /// The level of permission to grant the access token to manage the followers belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/followers`.
            @frozen package enum FollowersPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the followers belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/followers`.
            package var followers: Components.Schemas.AppPermissions.FollowersPayload?
            /// The level of permission to grant the access token to manage git SSH keys.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/git_ssh_keys`.
            @frozen package enum GitSshKeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to manage git SSH keys.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/git_ssh_keys`.
            package var gitSshKeys: Components.Schemas.AppPermissions.GitSshKeysPayload?
            /// The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/gpg_keys`.
            @frozen package enum GpgKeysPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/gpg_keys`.
            package var gpgKeys: Components.Schemas.AppPermissions.GpgKeysPayload?
            /// The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/interaction_limits`.
            @frozen package enum InteractionLimitsPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/interaction_limits`.
            package var interactionLimits: Components.Schemas.AppPermissions.InteractionLimitsPayload?
            /// The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/profile`.
            @frozen package enum ProfilePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case write = "write"
            }
            /// The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/profile`.
            package var profile: Components.Schemas.AppPermissions.ProfilePayload?
            /// The level of permission to grant the access token to list and manage repositories a user is starring.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/starring`.
            @frozen package enum StarringPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case read = "read"
                case write = "write"
            }
            /// The level of permission to grant the access token to list and manage repositories a user is starring.
            ///
            /// - Remark: Generated from `#/components/schemas/app-permissions/starring`.
            package var starring: Components.Schemas.AppPermissions.StarringPayload?
            /// Creates a new `AppPermissions`.
            ///
            /// - Parameters:
            ///   - actions: The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
            ///   - administration: The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
            ///   - checks: The level of permission to grant the access token for checks on code.
            ///   - codespaces: The level of permission to grant the access token to create, edit, delete, and list Codespaces.
            ///   - contents: The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
            ///   - dependabotSecrets: The leve of permission to grant the access token to manage Dependabot secrets.
            ///   - deployments: The level of permission to grant the access token for deployments and deployment statuses.
            ///   - environments: The level of permission to grant the access token for managing repository environments.
            ///   - issues: The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
            ///   - metadata: The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
            ///   - packages: The level of permission to grant the access token for packages published to GitHub Packages.
            ///   - pages: The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
            ///   - pullRequests: The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
            ///   - repositoryCustomProperties: The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
            ///   - repositoryHooks: The level of permission to grant the access token to manage the post-receive hooks for a repository.
            ///   - repositoryProjects: The level of permission to grant the access token to manage repository projects, columns, and cards.
            ///   - secretScanningAlerts: The level of permission to grant the access token to view and manage secret scanning alerts.
            ///   - secrets: The level of permission to grant the access token to manage repository secrets.
            ///   - securityEvents: The level of permission to grant the access token to view and manage security events like code scanning alerts.
            ///   - singleFile: The level of permission to grant the access token to manage just a single file.
            ///   - statuses: The level of permission to grant the access token for commit statuses.
            ///   - vulnerabilityAlerts: The level of permission to grant the access token to manage Dependabot alerts.
            ///   - workflows: The level of permission to grant the access token to update GitHub Actions workflow files.
            ///   - members: The level of permission to grant the access token for organization teams and members.
            ///   - organizationAdministration: The level of permission to grant the access token to manage access to an organization.
            ///   - organizationCustomRoles: The level of permission to grant the access token for custom repository roles management.
            ///   - organizationCustomOrgRoles: The level of permission to grant the access token for custom organization roles management.
            ///   - organizationCustomProperties: The level of permission to grant the access token for custom property management.
            ///   - organizationCopilotSeatManagement: The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.
            ///   - organizationAnnouncementBanners: The level of permission to grant the access token to view and manage announcement banners for an organization.
            ///   - organizationEvents: The level of permission to grant the access token to view events triggered by an activity in an organization.
            ///   - organizationHooks: The level of permission to grant the access token to manage the post-receive hooks for an organization.
            ///   - organizationPersonalAccessTokens: The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
            ///   - organizationPersonalAccessTokenRequests: The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
            ///   - organizationPlan: The level of permission to grant the access token for viewing an organization's plan.
            ///   - organizationProjects: The level of permission to grant the access token to manage organization projects and projects public preview (where available).
            ///   - organizationPackages: The level of permission to grant the access token for organization packages published to GitHub Packages.
            ///   - organizationSecrets: The level of permission to grant the access token to manage organization secrets.
            ///   - organizationSelfHostedRunners: The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
            ///   - organizationUserBlocking: The level of permission to grant the access token to view and manage users blocked by the organization.
            ///   - teamDiscussions: The level of permission to grant the access token to manage team discussions and related comments.
            ///   - emailAddresses: The level of permission to grant the access token to manage the email addresses belonging to a user.
            ///   - followers: The level of permission to grant the access token to manage the followers belonging to a user.
            ///   - gitSshKeys: The level of permission to grant the access token to manage git SSH keys.
            ///   - gpgKeys: The level of permission to grant the access token to view and manage GPG keys belonging to a user.
            ///   - interactionLimits: The level of permission to grant the access token to view and manage interaction limits on a repository.
            ///   - profile: The level of permission to grant the access token to manage the profile settings belonging to a user.
            ///   - starring: The level of permission to grant the access token to list and manage repositories a user is starring.
            package init(
                actions: Components.Schemas.AppPermissions.ActionsPayload? = nil,
                administration: Components.Schemas.AppPermissions.AdministrationPayload? = nil,
                checks: Components.Schemas.AppPermissions.ChecksPayload? = nil,
                codespaces: Components.Schemas.AppPermissions.CodespacesPayload? = nil,
                contents: Components.Schemas.AppPermissions.ContentsPayload? = nil,
                dependabotSecrets: Components.Schemas.AppPermissions.DependabotSecretsPayload? = nil,
                deployments: Components.Schemas.AppPermissions.DeploymentsPayload? = nil,
                environments: Components.Schemas.AppPermissions.EnvironmentsPayload? = nil,
                issues: Components.Schemas.AppPermissions.IssuesPayload? = nil,
                metadata: Components.Schemas.AppPermissions.MetadataPayload? = nil,
                packages: Components.Schemas.AppPermissions.PackagesPayload? = nil,
                pages: Components.Schemas.AppPermissions.PagesPayload? = nil,
                pullRequests: Components.Schemas.AppPermissions.PullRequestsPayload? = nil,
                repositoryCustomProperties: Components.Schemas.AppPermissions.RepositoryCustomPropertiesPayload? = nil,
                repositoryHooks: Components.Schemas.AppPermissions.RepositoryHooksPayload? = nil,
                repositoryProjects: Components.Schemas.AppPermissions.RepositoryProjectsPayload? = nil,
                secretScanningAlerts: Components.Schemas.AppPermissions.SecretScanningAlertsPayload? = nil,
                secrets: Components.Schemas.AppPermissions.SecretsPayload? = nil,
                securityEvents: Components.Schemas.AppPermissions.SecurityEventsPayload? = nil,
                singleFile: Components.Schemas.AppPermissions.SingleFilePayload? = nil,
                statuses: Components.Schemas.AppPermissions.StatusesPayload? = nil,
                vulnerabilityAlerts: Components.Schemas.AppPermissions.VulnerabilityAlertsPayload? = nil,
                workflows: Components.Schemas.AppPermissions.WorkflowsPayload? = nil,
                members: Components.Schemas.AppPermissions.MembersPayload? = nil,
                organizationAdministration: Components.Schemas.AppPermissions.OrganizationAdministrationPayload? = nil,
                organizationCustomRoles: Components.Schemas.AppPermissions.OrganizationCustomRolesPayload? = nil,
                organizationCustomOrgRoles: Components.Schemas.AppPermissions.OrganizationCustomOrgRolesPayload? = nil,
                organizationCustomProperties: Components.Schemas.AppPermissions.OrganizationCustomPropertiesPayload? = nil,
                organizationCopilotSeatManagement: Components.Schemas.AppPermissions.OrganizationCopilotSeatManagementPayload? = nil,
                organizationAnnouncementBanners: Components.Schemas.AppPermissions.OrganizationAnnouncementBannersPayload? = nil,
                organizationEvents: Components.Schemas.AppPermissions.OrganizationEventsPayload? = nil,
                organizationHooks: Components.Schemas.AppPermissions.OrganizationHooksPayload? = nil,
                organizationPersonalAccessTokens: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokensPayload? = nil,
                organizationPersonalAccessTokenRequests: Components.Schemas.AppPermissions.OrganizationPersonalAccessTokenRequestsPayload? = nil,
                organizationPlan: Components.Schemas.AppPermissions.OrganizationPlanPayload? = nil,
                organizationProjects: Components.Schemas.AppPermissions.OrganizationProjectsPayload? = nil,
                organizationPackages: Components.Schemas.AppPermissions.OrganizationPackagesPayload? = nil,
                organizationSecrets: Components.Schemas.AppPermissions.OrganizationSecretsPayload? = nil,
                organizationSelfHostedRunners: Components.Schemas.AppPermissions.OrganizationSelfHostedRunnersPayload? = nil,
                organizationUserBlocking: Components.Schemas.AppPermissions.OrganizationUserBlockingPayload? = nil,
                teamDiscussions: Components.Schemas.AppPermissions.TeamDiscussionsPayload? = nil,
                emailAddresses: Components.Schemas.AppPermissions.EmailAddressesPayload? = nil,
                followers: Components.Schemas.AppPermissions.FollowersPayload? = nil,
                gitSshKeys: Components.Schemas.AppPermissions.GitSshKeysPayload? = nil,
                gpgKeys: Components.Schemas.AppPermissions.GpgKeysPayload? = nil,
                interactionLimits: Components.Schemas.AppPermissions.InteractionLimitsPayload? = nil,
                profile: Components.Schemas.AppPermissions.ProfilePayload? = nil,
                starring: Components.Schemas.AppPermissions.StarringPayload? = nil
            ) {
                self.actions = actions
                self.administration = administration
                self.checks = checks
                self.codespaces = codespaces
                self.contents = contents
                self.dependabotSecrets = dependabotSecrets
                self.deployments = deployments
                self.environments = environments
                self.issues = issues
                self.metadata = metadata
                self.packages = packages
                self.pages = pages
                self.pullRequests = pullRequests
                self.repositoryCustomProperties = repositoryCustomProperties
                self.repositoryHooks = repositoryHooks
                self.repositoryProjects = repositoryProjects
                self.secretScanningAlerts = secretScanningAlerts
                self.secrets = secrets
                self.securityEvents = securityEvents
                self.singleFile = singleFile
                self.statuses = statuses
                self.vulnerabilityAlerts = vulnerabilityAlerts
                self.workflows = workflows
                self.members = members
                self.organizationAdministration = organizationAdministration
                self.organizationCustomRoles = organizationCustomRoles
                self.organizationCustomOrgRoles = organizationCustomOrgRoles
                self.organizationCustomProperties = organizationCustomProperties
                self.organizationCopilotSeatManagement = organizationCopilotSeatManagement
                self.organizationAnnouncementBanners = organizationAnnouncementBanners
                self.organizationEvents = organizationEvents
                self.organizationHooks = organizationHooks
                self.organizationPersonalAccessTokens = organizationPersonalAccessTokens
                self.organizationPersonalAccessTokenRequests = organizationPersonalAccessTokenRequests
                self.organizationPlan = organizationPlan
                self.organizationProjects = organizationProjects
                self.organizationPackages = organizationPackages
                self.organizationSecrets = organizationSecrets
                self.organizationSelfHostedRunners = organizationSelfHostedRunners
                self.organizationUserBlocking = organizationUserBlocking
                self.teamDiscussions = teamDiscussions
                self.emailAddresses = emailAddresses
                self.followers = followers
                self.gitSshKeys = gitSshKeys
                self.gpgKeys = gpgKeys
                self.interactionLimits = interactionLimits
                self.profile = profile
                self.starring = starring
            }
            package enum CodingKeys: String, CodingKey {
                case actions
                case administration
                case checks
                case codespaces
                case contents
                case dependabotSecrets = "dependabot_secrets"
                case deployments
                case environments
                case issues
                case metadata
                case packages
                case pages
                case pullRequests = "pull_requests"
                case repositoryCustomProperties = "repository_custom_properties"
                case repositoryHooks = "repository_hooks"
                case repositoryProjects = "repository_projects"
                case secretScanningAlerts = "secret_scanning_alerts"
                case secrets
                case securityEvents = "security_events"
                case singleFile = "single_file"
                case statuses
                case vulnerabilityAlerts = "vulnerability_alerts"
                case workflows
                case members
                case organizationAdministration = "organization_administration"
                case organizationCustomRoles = "organization_custom_roles"
                case organizationCustomOrgRoles = "organization_custom_org_roles"
                case organizationCustomProperties = "organization_custom_properties"
                case organizationCopilotSeatManagement = "organization_copilot_seat_management"
                case organizationAnnouncementBanners = "organization_announcement_banners"
                case organizationEvents = "organization_events"
                case organizationHooks = "organization_hooks"
                case organizationPersonalAccessTokens = "organization_personal_access_tokens"
                case organizationPersonalAccessTokenRequests = "organization_personal_access_token_requests"
                case organizationPlan = "organization_plan"
                case organizationProjects = "organization_projects"
                case organizationPackages = "organization_packages"
                case organizationSecrets = "organization_secrets"
                case organizationSelfHostedRunners = "organization_self_hosted_runners"
                case organizationUserBlocking = "organization_user_blocking"
                case teamDiscussions = "team_discussions"
                case emailAddresses = "email_addresses"
                case followers
                case gitSshKeys = "git_ssh_keys"
                case gpgKeys = "gpg_keys"
                case interactionLimits = "interaction_limits"
                case profile
                case starring
            }
        }
        /// License Simple
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-license-simple`.
        package struct NullableLicenseSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/key`.
            package var key: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/spdx_id`.
            package var spdxId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-license-simple/html_url`.
            package var htmlUrl: Swift.String?
            /// Creates a new `NullableLicenseSimple`.
            ///
            /// - Parameters:
            ///   - key:
            ///   - name:
            ///   - url:
            ///   - spdxId:
            ///   - nodeId:
            ///   - htmlUrl:
            package init(
                key: Swift.String,
                name: Swift.String,
                url: Swift.String? = nil,
                spdxId: Swift.String? = nil,
                nodeId: Swift.String,
                htmlUrl: Swift.String? = nil
            ) {
                self.key = key
                self.name = name
                self.url = url
                self.spdxId = spdxId
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
            }
            package enum CodingKeys: String, CodingKey {
                case key
                case name
                case url
                case spdxId = "spdx_id"
                case nodeId = "node_id"
                case htmlUrl = "html_url"
            }
        }
        /// A repository on GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/repository`.
        package struct Repository: Codable, Hashable, Sendable {
            /// Unique identifier of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/repository/node_id`.
            package var nodeId: Swift.String
            /// The name of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/full_name`.
            package var fullName: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/license`.
            package var license: Components.Schemas.NullableLicenseSimple?
            /// - Remark: Generated from `#/components/schemas/repository/forks`.
            package var forks: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/permissions/admin`.
                package var admin: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/triage`.
                package var triage: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/repository/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/repository/permissions/maintain`.
                package var maintain: Swift.Bool?
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - admin:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                package init(
                    admin: Swift.Bool,
                    pull: Swift.Bool,
                    triage: Swift.Bool? = nil,
                    push: Swift.Bool,
                    maintain: Swift.Bool? = nil
                ) {
                    self.admin = admin
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                }
                package enum CodingKeys: String, CodingKey {
                    case admin
                    case pull
                    case triage
                    case push
                    case maintain
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/permissions`.
            package var permissions: Components.Schemas.Repository.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/repository/owner`.
            package var owner: Components.Schemas.SimpleUser
            /// Whether the repository is private or public.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/private`.
            package var _private: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/fork`.
            package var fork: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/archive_url`.
            package var archiveUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/assignees_url`.
            package var assigneesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/blobs_url`.
            package var blobsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/branches_url`.
            package var branchesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/collaborators_url`.
            package var collaboratorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/compare_url`.
            package var compareUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contents_url`.
            package var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/contributors_url`.
            package var contributorsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/deployments_url`.
            package var deploymentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/downloads_url`.
            package var downloadsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/forks_url`.
            package var forksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_commits_url`.
            package var gitCommitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_refs_url`.
            package var gitRefsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_tags_url`.
            package var gitTagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/git_url`.
            package var gitUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_comment_url`.
            package var issueCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issue_events_url`.
            package var issueEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/issues_url`.
            package var issuesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/keys_url`.
            package var keysUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/languages_url`.
            package var languagesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/merges_url`.
            package var mergesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/milestones_url`.
            package var milestonesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/notifications_url`.
            package var notificationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/pulls_url`.
            package var pullsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/releases_url`.
            package var releasesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/ssh_url`.
            package var sshUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_url`.
            package var stargazersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/statuses_url`.
            package var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscribers_url`.
            package var subscribersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/subscription_url`.
            package var subscriptionUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/tags_url`.
            package var tagsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/teams_url`.
            package var teamsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/trees_url`.
            package var treesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/clone_url`.
            package var cloneUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/mirror_url`.
            package var mirrorUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/hooks_url`.
            package var hooksUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/svn_url`.
            package var svnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/homepage`.
            package var homepage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/language`.
            package var language: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/forks_count`.
            package var forksCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/stargazers_count`.
            package var stargazersCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers_count`.
            package var watchersCount: Swift.Int
            /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/size`.
            package var size: Swift.Int
            /// The default branch of the repository.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/default_branch`.
            package var defaultBranch: Swift.String
            /// - Remark: Generated from `#/components/schemas/repository/open_issues_count`.
            package var openIssuesCount: Swift.Int
            /// Whether this repository acts as a template that can be used to generate new repositories.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/is_template`.
            package var isTemplate: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/topics`.
            package var topics: [Swift.String]?
            /// Whether issues are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_issues`.
            package var hasIssues: Swift.Bool
            /// Whether projects are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_projects`.
            package var hasProjects: Swift.Bool
            /// Whether the wiki is enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_wiki`.
            package var hasWiki: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/repository/has_pages`.
            package var hasPages: Swift.Bool
            /// Whether downloads are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_downloads`.
            @available(*, deprecated)
            package var hasDownloads: Swift.Bool
            /// Whether discussions are enabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/has_discussions`.
            package var hasDiscussions: Swift.Bool?
            /// Whether the repository is archived.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/archived`.
            package var archived: Swift.Bool
            /// Returns whether or not this repository disabled.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/disabled`.
            package var disabled: Swift.Bool
            /// The repository visibility: public, private, or internal.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/visibility`.
            package var visibility: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            @frozen package enum PushedAtPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/pushed_at/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/repository/pushed_at/case2`.
                case case2(Foundation.Date)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/pushed_at`.
            package var pushedAt: Components.Schemas.Repository.PushedAtPayload?
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            @frozen package enum CreatedAtPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/created_at/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/repository/created_at/case2`.
                case case2(Foundation.Date)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/created_at`.
            package var createdAt: Components.Schemas.Repository.CreatedAtPayload?
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            @frozen package enum UpdatedAtPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/repository/updated_at/case1`.
                case case1(Swift.Int)
                /// - Remark: Generated from `#/components/schemas/repository/updated_at/case2`.
                case case2(Foundation.Date)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/repository/updated_at`.
            package var updatedAt: Components.Schemas.Repository.UpdatedAtPayload?
            /// Whether to allow rebase merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_rebase_merge`.
            package var allowRebaseMerge: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/temp_clone_token`.
            package var tempCloneToken: Swift.String?
            /// Whether to allow squash merges for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_squash_merge`.
            package var allowSquashMerge: Swift.Bool?
            /// Whether to allow Auto-merge to be used on pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_auto_merge`.
            package var allowAutoMerge: Swift.Bool?
            /// Whether to delete head branches when pull requests are merged
            ///
            /// - Remark: Generated from `#/components/schemas/repository/delete_branch_on_merge`.
            package var deleteBranchOnMerge: Swift.Bool?
            /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_update_branch`.
            package var allowUpdateBranch: Swift.Bool?
            /// Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/use_squash_pr_title_as_default`.
            @available(*, deprecated)
            package var useSquashPrTitleAsDefault: Swift.Bool?
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            @frozen package enum SquashMergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case commitOrPrTitle = "COMMIT_OR_PR_TITLE"
            }
            /// The default value for a squash merge commit title:
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_title`.
            package var squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload?
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            @frozen package enum SquashMergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case commitMessages = "COMMIT_MESSAGES"
                case blank = "BLANK"
            }
            /// The default value for a squash merge commit message:
            ///
            /// - `PR_BODY` - default to the pull request's body.
            /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/squash_merge_commit_message`.
            package var squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload?
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            @frozen package enum MergeCommitTitlePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prTitle = "PR_TITLE"
                case mergeMessage = "MERGE_MESSAGE"
            }
            /// The default value for a merge commit title.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_title`.
            package var mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload?
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            @frozen package enum MergeCommitMessagePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case prBody = "PR_BODY"
                case prTitle = "PR_TITLE"
                case blank = "BLANK"
            }
            /// The default value for a merge commit message.
            ///
            /// - `PR_TITLE` - default to the pull request's title.
            /// - `PR_BODY` - default to the pull request's body.
            /// - `BLANK` - default to a blank commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/merge_commit_message`.
            package var mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload?
            /// Whether to allow merge commits for pull requests.
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_merge_commit`.
            package var allowMergeCommit: Swift.Bool?
            /// Whether to allow forking this repo
            ///
            /// - Remark: Generated from `#/components/schemas/repository/allow_forking`.
            package var allowForking: Swift.Bool?
            /// Whether to require contributors to sign off on web-based commits
            ///
            /// - Remark: Generated from `#/components/schemas/repository/web_commit_signoff_required`.
            package var webCommitSignoffRequired: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/repository/open_issues`.
            package var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/watchers`.
            package var watchers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/repository/master_branch`.
            package var masterBranch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/repository/starred_at`.
            package var starredAt: Swift.String?
            /// Whether anonymous git access is enabled for this repository
            ///
            /// - Remark: Generated from `#/components/schemas/repository/anonymous_access_enabled`.
            package var anonymousAccessEnabled: Swift.Bool?
            /// Creates a new `Repository`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the repository
            ///   - nodeId:
            ///   - name: The name of the repository.
            ///   - fullName:
            ///   - license:
            ///   - forks:
            ///   - permissions:
            ///   - owner:
            ///   - _private: Whether the repository is private or public.
            ///   - htmlUrl:
            ///   - description:
            ///   - fork:
            ///   - url:
            ///   - archiveUrl:
            ///   - assigneesUrl:
            ///   - blobsUrl:
            ///   - branchesUrl:
            ///   - collaboratorsUrl:
            ///   - commentsUrl:
            ///   - commitsUrl:
            ///   - compareUrl:
            ///   - contentsUrl:
            ///   - contributorsUrl:
            ///   - deploymentsUrl:
            ///   - downloadsUrl:
            ///   - eventsUrl:
            ///   - forksUrl:
            ///   - gitCommitsUrl:
            ///   - gitRefsUrl:
            ///   - gitTagsUrl:
            ///   - gitUrl:
            ///   - issueCommentUrl:
            ///   - issueEventsUrl:
            ///   - issuesUrl:
            ///   - keysUrl:
            ///   - labelsUrl:
            ///   - languagesUrl:
            ///   - mergesUrl:
            ///   - milestonesUrl:
            ///   - notificationsUrl:
            ///   - pullsUrl:
            ///   - releasesUrl:
            ///   - sshUrl:
            ///   - stargazersUrl:
            ///   - statusesUrl:
            ///   - subscribersUrl:
            ///   - subscriptionUrl:
            ///   - tagsUrl:
            ///   - teamsUrl:
            ///   - treesUrl:
            ///   - cloneUrl:
            ///   - mirrorUrl:
            ///   - hooksUrl:
            ///   - svnUrl:
            ///   - homepage:
            ///   - language:
            ///   - forksCount:
            ///   - stargazersCount:
            ///   - watchersCount:
            ///   - size: The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
            ///   - defaultBranch: The default branch of the repository.
            ///   - openIssuesCount:
            ///   - isTemplate: Whether this repository acts as a template that can be used to generate new repositories.
            ///   - topics:
            ///   - hasIssues: Whether issues are enabled.
            ///   - hasProjects: Whether projects are enabled.
            ///   - hasWiki: Whether the wiki is enabled.
            ///   - hasPages:
            ///   - hasDownloads: Whether downloads are enabled.
            ///   - hasDiscussions: Whether discussions are enabled.
            ///   - archived: Whether the repository is archived.
            ///   - disabled: Returns whether or not this repository disabled.
            ///   - visibility: The repository visibility: public, private, or internal.
            ///   - pushedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - allowRebaseMerge: Whether to allow rebase merges for pull requests.
            ///   - tempCloneToken:
            ///   - allowSquashMerge: Whether to allow squash merges for pull requests.
            ///   - allowAutoMerge: Whether to allow Auto-merge to be used on pull requests.
            ///   - deleteBranchOnMerge: Whether to delete head branches when pull requests are merged
            ///   - allowUpdateBranch: Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
            ///   - useSquashPrTitleAsDefault: Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.
            ///   - squashMergeCommitTitle: The default value for a squash merge commit title:
            ///   - squashMergeCommitMessage: The default value for a squash merge commit message:
            ///   - mergeCommitTitle: The default value for a merge commit title.
            ///   - mergeCommitMessage: The default value for a merge commit message.
            ///   - allowMergeCommit: Whether to allow merge commits for pull requests.
            ///   - allowForking: Whether to allow forking this repo
            ///   - webCommitSignoffRequired: Whether to require contributors to sign off on web-based commits
            ///   - openIssues:
            ///   - watchers:
            ///   - masterBranch:
            ///   - starredAt:
            ///   - anonymousAccessEnabled: Whether anonymous git access is enabled for this repository
            package init(
                id: Swift.Int64,
                nodeId: Swift.String,
                name: Swift.String,
                fullName: Swift.String,
                license: Components.Schemas.NullableLicenseSimple? = nil,
                forks: Swift.Int,
                permissions: Components.Schemas.Repository.PermissionsPayload? = nil,
                owner: Components.Schemas.SimpleUser,
                _private: Swift.Bool,
                htmlUrl: Swift.String,
                description: Swift.String? = nil,
                fork: Swift.Bool,
                url: Swift.String,
                archiveUrl: Swift.String,
                assigneesUrl: Swift.String,
                blobsUrl: Swift.String,
                branchesUrl: Swift.String,
                collaboratorsUrl: Swift.String,
                commentsUrl: Swift.String,
                commitsUrl: Swift.String,
                compareUrl: Swift.String,
                contentsUrl: Swift.String,
                contributorsUrl: Swift.String,
                deploymentsUrl: Swift.String,
                downloadsUrl: Swift.String,
                eventsUrl: Swift.String,
                forksUrl: Swift.String,
                gitCommitsUrl: Swift.String,
                gitRefsUrl: Swift.String,
                gitTagsUrl: Swift.String,
                gitUrl: Swift.String,
                issueCommentUrl: Swift.String,
                issueEventsUrl: Swift.String,
                issuesUrl: Swift.String,
                keysUrl: Swift.String,
                labelsUrl: Swift.String,
                languagesUrl: Swift.String,
                mergesUrl: Swift.String,
                milestonesUrl: Swift.String,
                notificationsUrl: Swift.String,
                pullsUrl: Swift.String,
                releasesUrl: Swift.String,
                sshUrl: Swift.String,
                stargazersUrl: Swift.String,
                statusesUrl: Swift.String,
                subscribersUrl: Swift.String,
                subscriptionUrl: Swift.String,
                tagsUrl: Swift.String,
                teamsUrl: Swift.String,
                treesUrl: Swift.String,
                cloneUrl: Swift.String,
                mirrorUrl: Swift.String? = nil,
                hooksUrl: Swift.String,
                svnUrl: Swift.String,
                homepage: Swift.String? = nil,
                language: Swift.String? = nil,
                forksCount: Swift.Int,
                stargazersCount: Swift.Int,
                watchersCount: Swift.Int,
                size: Swift.Int,
                defaultBranch: Swift.String,
                openIssuesCount: Swift.Int,
                isTemplate: Swift.Bool? = nil,
                topics: [Swift.String]? = nil,
                hasIssues: Swift.Bool,
                hasProjects: Swift.Bool,
                hasWiki: Swift.Bool,
                hasPages: Swift.Bool,
                hasDownloads: Swift.Bool,
                hasDiscussions: Swift.Bool? = nil,
                archived: Swift.Bool,
                disabled: Swift.Bool,
                visibility: Swift.String? = nil,
                pushedAt: Components.Schemas.Repository.PushedAtPayload? = nil,
                createdAt: Components.Schemas.Repository.CreatedAtPayload? = nil,
                updatedAt: Components.Schemas.Repository.UpdatedAtPayload? = nil,
                allowRebaseMerge: Swift.Bool? = nil,
                tempCloneToken: Swift.String? = nil,
                allowSquashMerge: Swift.Bool? = nil,
                allowAutoMerge: Swift.Bool? = nil,
                deleteBranchOnMerge: Swift.Bool? = nil,
                allowUpdateBranch: Swift.Bool? = nil,
                useSquashPrTitleAsDefault: Swift.Bool? = nil,
                squashMergeCommitTitle: Components.Schemas.Repository.SquashMergeCommitTitlePayload? = nil,
                squashMergeCommitMessage: Components.Schemas.Repository.SquashMergeCommitMessagePayload? = nil,
                mergeCommitTitle: Components.Schemas.Repository.MergeCommitTitlePayload? = nil,
                mergeCommitMessage: Components.Schemas.Repository.MergeCommitMessagePayload? = nil,
                allowMergeCommit: Swift.Bool? = nil,
                allowForking: Swift.Bool? = nil,
                webCommitSignoffRequired: Swift.Bool? = nil,
                openIssues: Swift.Int,
                watchers: Swift.Int,
                masterBranch: Swift.String? = nil,
                starredAt: Swift.String? = nil,
                anonymousAccessEnabled: Swift.Bool? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.fullName = fullName
                self.license = license
                self.forks = forks
                self.permissions = permissions
                self.owner = owner
                self._private = _private
                self.htmlUrl = htmlUrl
                self.description = description
                self.fork = fork
                self.url = url
                self.archiveUrl = archiveUrl
                self.assigneesUrl = assigneesUrl
                self.blobsUrl = blobsUrl
                self.branchesUrl = branchesUrl
                self.collaboratorsUrl = collaboratorsUrl
                self.commentsUrl = commentsUrl
                self.commitsUrl = commitsUrl
                self.compareUrl = compareUrl
                self.contentsUrl = contentsUrl
                self.contributorsUrl = contributorsUrl
                self.deploymentsUrl = deploymentsUrl
                self.downloadsUrl = downloadsUrl
                self.eventsUrl = eventsUrl
                self.forksUrl = forksUrl
                self.gitCommitsUrl = gitCommitsUrl
                self.gitRefsUrl = gitRefsUrl
                self.gitTagsUrl = gitTagsUrl
                self.gitUrl = gitUrl
                self.issueCommentUrl = issueCommentUrl
                self.issueEventsUrl = issueEventsUrl
                self.issuesUrl = issuesUrl
                self.keysUrl = keysUrl
                self.labelsUrl = labelsUrl
                self.languagesUrl = languagesUrl
                self.mergesUrl = mergesUrl
                self.milestonesUrl = milestonesUrl
                self.notificationsUrl = notificationsUrl
                self.pullsUrl = pullsUrl
                self.releasesUrl = releasesUrl
                self.sshUrl = sshUrl
                self.stargazersUrl = stargazersUrl
                self.statusesUrl = statusesUrl
                self.subscribersUrl = subscribersUrl
                self.subscriptionUrl = subscriptionUrl
                self.tagsUrl = tagsUrl
                self.teamsUrl = teamsUrl
                self.treesUrl = treesUrl
                self.cloneUrl = cloneUrl
                self.mirrorUrl = mirrorUrl
                self.hooksUrl = hooksUrl
                self.svnUrl = svnUrl
                self.homepage = homepage
                self.language = language
                self.forksCount = forksCount
                self.stargazersCount = stargazersCount
                self.watchersCount = watchersCount
                self.size = size
                self.defaultBranch = defaultBranch
                self.openIssuesCount = openIssuesCount
                self.isTemplate = isTemplate
                self.topics = topics
                self.hasIssues = hasIssues
                self.hasProjects = hasProjects
                self.hasWiki = hasWiki
                self.hasPages = hasPages
                self.hasDownloads = hasDownloads
                self.hasDiscussions = hasDiscussions
                self.archived = archived
                self.disabled = disabled
                self.visibility = visibility
                self.pushedAt = pushedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.allowRebaseMerge = allowRebaseMerge
                self.tempCloneToken = tempCloneToken
                self.allowSquashMerge = allowSquashMerge
                self.allowAutoMerge = allowAutoMerge
                self.deleteBranchOnMerge = deleteBranchOnMerge
                self.allowUpdateBranch = allowUpdateBranch
                self.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault
                self.squashMergeCommitTitle = squashMergeCommitTitle
                self.squashMergeCommitMessage = squashMergeCommitMessage
                self.mergeCommitTitle = mergeCommitTitle
                self.mergeCommitMessage = mergeCommitMessage
                self.allowMergeCommit = allowMergeCommit
                self.allowForking = allowForking
                self.webCommitSignoffRequired = webCommitSignoffRequired
                self.openIssues = openIssues
                self.watchers = watchers
                self.masterBranch = masterBranch
                self.starredAt = starredAt
                self.anonymousAccessEnabled = anonymousAccessEnabled
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case fullName = "full_name"
                case license
                case forks
                case permissions
                case owner
                case _private = "private"
                case htmlUrl = "html_url"
                case description
                case fork
                case url
                case archiveUrl = "archive_url"
                case assigneesUrl = "assignees_url"
                case blobsUrl = "blobs_url"
                case branchesUrl = "branches_url"
                case collaboratorsUrl = "collaborators_url"
                case commentsUrl = "comments_url"
                case commitsUrl = "commits_url"
                case compareUrl = "compare_url"
                case contentsUrl = "contents_url"
                case contributorsUrl = "contributors_url"
                case deploymentsUrl = "deployments_url"
                case downloadsUrl = "downloads_url"
                case eventsUrl = "events_url"
                case forksUrl = "forks_url"
                case gitCommitsUrl = "git_commits_url"
                case gitRefsUrl = "git_refs_url"
                case gitTagsUrl = "git_tags_url"
                case gitUrl = "git_url"
                case issueCommentUrl = "issue_comment_url"
                case issueEventsUrl = "issue_events_url"
                case issuesUrl = "issues_url"
                case keysUrl = "keys_url"
                case labelsUrl = "labels_url"
                case languagesUrl = "languages_url"
                case mergesUrl = "merges_url"
                case milestonesUrl = "milestones_url"
                case notificationsUrl = "notifications_url"
                case pullsUrl = "pulls_url"
                case releasesUrl = "releases_url"
                case sshUrl = "ssh_url"
                case stargazersUrl = "stargazers_url"
                case statusesUrl = "statuses_url"
                case subscribersUrl = "subscribers_url"
                case subscriptionUrl = "subscription_url"
                case tagsUrl = "tags_url"
                case teamsUrl = "teams_url"
                case treesUrl = "trees_url"
                case cloneUrl = "clone_url"
                case mirrorUrl = "mirror_url"
                case hooksUrl = "hooks_url"
                case svnUrl = "svn_url"
                case homepage
                case language
                case forksCount = "forks_count"
                case stargazersCount = "stargazers_count"
                case watchersCount = "watchers_count"
                case size
                case defaultBranch = "default_branch"
                case openIssuesCount = "open_issues_count"
                case isTemplate = "is_template"
                case topics
                case hasIssues = "has_issues"
                case hasProjects = "has_projects"
                case hasWiki = "has_wiki"
                case hasPages = "has_pages"
                case hasDownloads = "has_downloads"
                case hasDiscussions = "has_discussions"
                case archived
                case disabled
                case visibility
                case pushedAt = "pushed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case allowRebaseMerge = "allow_rebase_merge"
                case tempCloneToken = "temp_clone_token"
                case allowSquashMerge = "allow_squash_merge"
                case allowAutoMerge = "allow_auto_merge"
                case deleteBranchOnMerge = "delete_branch_on_merge"
                case allowUpdateBranch = "allow_update_branch"
                case useSquashPrTitleAsDefault = "use_squash_pr_title_as_default"
                case squashMergeCommitTitle = "squash_merge_commit_title"
                case squashMergeCommitMessage = "squash_merge_commit_message"
                case mergeCommitTitle = "merge_commit_title"
                case mergeCommitMessage = "merge_commit_message"
                case allowMergeCommit = "allow_merge_commit"
                case allowForking = "allow_forking"
                case webCommitSignoffRequired = "web_commit_signoff_required"
                case openIssues = "open_issues"
                case watchers
                case masterBranch = "master_branch"
                case starredAt = "starred_at"
                case anonymousAccessEnabled = "anonymous_access_enabled"
            }
        }
        /// Authentication token for a GitHub App installed on a user or org.
        ///
        /// - Remark: Generated from `#/components/schemas/installation-token`.
        package struct InstallationToken: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/installation-token/token`.
            package var token: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/expires_at`.
            package var expiresAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/installation-token/permissions`.
            package var permissions: Components.Schemas.AppPermissions?
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            @frozen package enum RepositorySelectionPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case all = "all"
                case selected = "selected"
            }
            /// - Remark: Generated from `#/components/schemas/installation-token/repository_selection`.
            package var repositorySelection: Components.Schemas.InstallationToken.RepositorySelectionPayload?
            /// - Remark: Generated from `#/components/schemas/installation-token/repositories`.
            package var repositories: [Components.Schemas.Repository]?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file`.
            package var singleFile: Swift.String?
            /// - Remark: Generated from `#/components/schemas/installation-token/has_multiple_single_files`.
            package var hasMultipleSingleFiles: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/installation-token/single_file_paths`.
            package var singleFilePaths: [Swift.String]?
            /// Creates a new `InstallationToken`.
            ///
            /// - Parameters:
            ///   - token:
            ///   - expiresAt:
            ///   - permissions:
            ///   - repositorySelection:
            ///   - repositories:
            ///   - singleFile:
            ///   - hasMultipleSingleFiles:
            ///   - singleFilePaths:
            package init(
                token: Swift.String,
                expiresAt: Swift.String,
                permissions: Components.Schemas.AppPermissions? = nil,
                repositorySelection: Components.Schemas.InstallationToken.RepositorySelectionPayload? = nil,
                repositories: [Components.Schemas.Repository]? = nil,
                singleFile: Swift.String? = nil,
                hasMultipleSingleFiles: Swift.Bool? = nil,
                singleFilePaths: [Swift.String]? = nil
            ) {
                self.token = token
                self.expiresAt = expiresAt
                self.permissions = permissions
                self.repositorySelection = repositorySelection
                self.repositories = repositories
                self.singleFile = singleFile
                self.hasMultipleSingleFiles = hasMultipleSingleFiles
                self.singleFilePaths = singleFilePaths
            }
            package enum CodingKeys: String, CodingKey {
                case token
                case expiresAt = "expires_at"
                case permissions
                case repositorySelection = "repository_selection"
                case repositories
                case singleFile = "single_file"
                case hasMultipleSingleFiles = "has_multiple_single_files"
                case singleFilePaths = "single_file_paths"
            }
        }
        /// A collection of related issues and pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-milestone`.
        package struct NullableMilestone: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/node_id`.
            package var nodeId: Swift.String
            /// The number of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/number`.
            package var number: Swift.Int
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case open = "open"
                case closed = "closed"
            }
            /// The state of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/state`.
            package var state: Components.Schemas.NullableMilestone.StatePayload
            /// The title of the milestone.
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/creator`.
            package var creator: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/open_issues`.
            package var openIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_issues`.
            package var closedIssues: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/nullable-milestone/due_on`.
            package var dueOn: Foundation.Date?
            /// Creates a new `NullableMilestone`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - htmlUrl:
            ///   - labelsUrl:
            ///   - id:
            ///   - nodeId:
            ///   - number: The number of the milestone.
            ///   - state: The state of the milestone.
            ///   - title: The title of the milestone.
            ///   - description:
            ///   - creator:
            ///   - openIssues:
            ///   - closedIssues:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - closedAt:
            ///   - dueOn:
            package init(
                url: Swift.String,
                htmlUrl: Swift.String,
                labelsUrl: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.NullableMilestone.StatePayload,
                title: Swift.String,
                description: Swift.String? = nil,
                creator: Components.Schemas.NullableSimpleUser? = nil,
                openIssues: Swift.Int,
                closedIssues: Swift.Int,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                closedAt: Foundation.Date? = nil,
                dueOn: Foundation.Date? = nil
            ) {
                self.url = url
                self.htmlUrl = htmlUrl
                self.labelsUrl = labelsUrl
                self.id = id
                self.nodeId = nodeId
                self.number = number
                self.state = state
                self.title = title
                self.description = description
                self.creator = creator
                self.openIssues = openIssues
                self.closedIssues = closedIssues
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.closedAt = closedAt
                self.dueOn = dueOn
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case htmlUrl = "html_url"
                case labelsUrl = "labels_url"
                case id
                case nodeId = "node_id"
                case number
                case state
                case title
                case description
                case creator
                case openIssues = "open_issues"
                case closedIssues = "closed_issues"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case closedAt = "closed_at"
                case dueOn = "due_on"
            }
        }
        /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-integration`.
        package struct NullableIntegration: Codable, Hashable, Sendable {
            /// Unique identifier of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/id`.
            package var id: Swift.Int
            /// The slug name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/slug`.
            package var slug: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_id`.
            package var clientId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/owner`.
            package var owner: Components.Schemas.NullableSimpleUser?
            /// The name of the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/external_url`.
            package var externalUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-integration/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/nullable-integration/updated_at`.
            package var updatedAt: Foundation.Date
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/issues`.
                package var issues: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/checks`.
                package var checks: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/metadata`.
                package var metadata: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/contents`.
                package var contents: Swift.String?
                /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions/deployments`.
                package var deployments: Swift.String?
                /// A container of undocumented properties.
                package var additionalProperties: [String: Swift.String]
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - issues:
                ///   - checks:
                ///   - metadata:
                ///   - contents:
                ///   - deployments:
                ///   - additionalProperties: A container of undocumented properties.
                package init(
                    issues: Swift.String? = nil,
                    checks: Swift.String? = nil,
                    metadata: Swift.String? = nil,
                    contents: Swift.String? = nil,
                    deployments: Swift.String? = nil,
                    additionalProperties: [String: Swift.String] = .init()
                ) {
                    self.issues = issues
                    self.checks = checks
                    self.metadata = metadata
                    self.contents = contents
                    self.deployments = deployments
                    self.additionalProperties = additionalProperties
                }
                package enum CodingKeys: String, CodingKey {
                    case issues
                    case checks
                    case metadata
                    case contents
                    case deployments
                }
                package init(from decoder: any Decoder) throws {
                    let container = try decoder.container(keyedBy: CodingKeys.self)
                    self.issues = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .issues
                    )
                    self.checks = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .checks
                    )
                    self.metadata = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .metadata
                    )
                    self.contents = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .contents
                    )
                    self.deployments = try container.decodeIfPresent(
                        Swift.String.self,
                        forKey: .deployments
                    )
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [
                        "issues",
                        "checks",
                        "metadata",
                        "contents",
                        "deployments"
                    ])
                }
                package func encode(to encoder: any Encoder) throws {
                    var container = encoder.container(keyedBy: CodingKeys.self)
                    try container.encodeIfPresent(
                        self.issues,
                        forKey: .issues
                    )
                    try container.encodeIfPresent(
                        self.checks,
                        forKey: .checks
                    )
                    try container.encodeIfPresent(
                        self.metadata,
                        forKey: .metadata
                    )
                    try container.encodeIfPresent(
                        self.contents,
                        forKey: .contents
                    )
                    try container.encodeIfPresent(
                        self.deployments,
                        forKey: .deployments
                    )
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// The set of permissions for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/permissions`.
            package var permissions: Components.Schemas.NullableIntegration.PermissionsPayload
            /// The list of events for the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/events`.
            package var events: [Swift.String]
            /// The number of installations associated with the GitHub app
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-integration/installations_count`.
            package var installationsCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/client_secret`.
            package var clientSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/webhook_secret`.
            package var webhookSecret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-integration/pem`.
            package var pem: Swift.String?
            /// Creates a new `NullableIntegration`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the GitHub app
            ///   - slug: The slug name of the GitHub app
            ///   - nodeId:
            ///   - clientId:
            ///   - owner:
            ///   - name: The name of the GitHub app
            ///   - description:
            ///   - externalUrl:
            ///   - htmlUrl:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - permissions: The set of permissions for the GitHub app
            ///   - events: The list of events for the GitHub app
            ///   - installationsCount: The number of installations associated with the GitHub app
            ///   - clientSecret:
            ///   - webhookSecret:
            ///   - pem:
            package init(
                id: Swift.Int,
                slug: Swift.String? = nil,
                nodeId: Swift.String,
                clientId: Swift.String? = nil,
                owner: Components.Schemas.NullableSimpleUser? = nil,
                name: Swift.String,
                description: Swift.String? = nil,
                externalUrl: Swift.String,
                htmlUrl: Swift.String,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                permissions: Components.Schemas.NullableIntegration.PermissionsPayload,
                events: [Swift.String],
                installationsCount: Swift.Int? = nil,
                clientSecret: Swift.String? = nil,
                webhookSecret: Swift.String? = nil,
                pem: Swift.String? = nil
            ) {
                self.id = id
                self.slug = slug
                self.nodeId = nodeId
                self.clientId = clientId
                self.owner = owner
                self.name = name
                self.description = description
                self.externalUrl = externalUrl
                self.htmlUrl = htmlUrl
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.permissions = permissions
                self.events = events
                self.installationsCount = installationsCount
                self.clientSecret = clientSecret
                self.webhookSecret = webhookSecret
                self.pem = pem
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case slug
                case nodeId = "node_id"
                case clientId = "client_id"
                case owner
                case name
                case description
                case externalUrl = "external_url"
                case htmlUrl = "html_url"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case permissions
                case events
                case installationsCount = "installations_count"
                case clientSecret = "client_secret"
                case webhookSecret = "webhook_secret"
                case pem
            }
        }
        /// How the author is associated with the repository.
        ///
        /// - Remark: Generated from `#/components/schemas/author-association`.
        @frozen package enum AuthorAssociation: String, Codable, Hashable, Sendable, CaseIterable {
            case collaborator = "COLLABORATOR"
            case contributor = "CONTRIBUTOR"
            case firstTimer = "FIRST_TIMER"
            case firstTimeContributor = "FIRST_TIME_CONTRIBUTOR"
            case mannequin = "MANNEQUIN"
            case member = "MEMBER"
            case none = "NONE"
            case owner = "OWNER"
        }
        /// - Remark: Generated from `#/components/schemas/reaction-rollup`.
        package struct ReactionRollup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/total_count`.
            package var totalCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/+1`.
            package var _plus_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/-1`.
            package var _hyphen_1: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/laugh`.
            package var laugh: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/confused`.
            package var confused: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/heart`.
            package var heart: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/hooray`.
            package var hooray: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/eyes`.
            package var eyes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/reaction-rollup/rocket`.
            package var rocket: Swift.Int
            /// Creates a new `ReactionRollup`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - totalCount:
            ///   - _plus_1:
            ///   - _hyphen_1:
            ///   - laugh:
            ///   - confused:
            ///   - heart:
            ///   - hooray:
            ///   - eyes:
            ///   - rocket:
            package init(
                url: Swift.String,
                totalCount: Swift.Int,
                _plus_1: Swift.Int,
                _hyphen_1: Swift.Int,
                laugh: Swift.Int,
                confused: Swift.Int,
                heart: Swift.Int,
                hooray: Swift.Int,
                eyes: Swift.Int,
                rocket: Swift.Int
            ) {
                self.url = url
                self.totalCount = totalCount
                self._plus_1 = _plus_1
                self._hyphen_1 = _hyphen_1
                self.laugh = laugh
                self.confused = confused
                self.heart = heart
                self.hooray = hooray
                self.eyes = eyes
                self.rocket = rocket
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case totalCount = "total_count"
                case _plus_1 = "+1"
                case _hyphen_1 = "-1"
                case laugh
                case confused
                case heart
                case hooray
                case eyes
                case rocket
            }
        }
        /// - Remark: Generated from `#/components/schemas/sub-issues-summary`.
        package struct SubIssuesSummary: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/sub-issues-summary/total`.
            package var total: Swift.Int
            /// - Remark: Generated from `#/components/schemas/sub-issues-summary/completed`.
            package var completed: Swift.Int
            /// - Remark: Generated from `#/components/schemas/sub-issues-summary/percent_completed`.
            package var percentCompleted: Swift.Int
            /// Creates a new `SubIssuesSummary`.
            ///
            /// - Parameters:
            ///   - total:
            ///   - completed:
            ///   - percentCompleted:
            package init(
                total: Swift.Int,
                completed: Swift.Int,
                percentCompleted: Swift.Int
            ) {
                self.total = total
                self.completed = completed
                self.percentCompleted = percentCompleted
            }
            package enum CodingKeys: String, CodingKey {
                case total
                case completed
                case percentCompleted = "percent_completed"
            }
        }
        /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
        ///
        /// - Remark: Generated from `#/components/schemas/issue`.
        package struct Issue: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/issue/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/issue/node_id`.
            package var nodeId: Swift.String
            /// URL for the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/repository_url`.
            package var repositoryUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/labels_url`.
            package var labelsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/issue/html_url`.
            package var htmlUrl: Swift.String
            /// Number uniquely identifying the issue within its repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/number`.
            package var number: Swift.Int
            /// State of the issue; either 'open' or 'closed'
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state`.
            package var state: Swift.String
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            @frozen package enum StateReasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case completed = "completed"
                case reopened = "reopened"
                case notPlanned = "not_planned"
                case duplicate = "duplicate"
            }
            /// The reason for the current state
            ///
            /// - Remark: Generated from `#/components/schemas/issue/state_reason`.
            package var stateReason: Components.Schemas.Issue.StateReasonPayload?
            /// Title of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/title`.
            package var title: Swift.String
            /// Contents of the issue
            ///
            /// - Remark: Generated from `#/components/schemas/issue/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload`.
            @frozen package enum LabelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case1`.
                case case1(Swift.String)
                /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2`.
                package struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/id`.
                    package var id: Swift.Int64?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/node_id`.
                    package var nodeId: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/url`.
                    package var url: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/name`.
                    package var name: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/description`.
                    package var description: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/color`.
                    package var color: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2/default`.
                    package var _default: Swift.Bool?
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - id:
                    ///   - nodeId:
                    ///   - url:
                    ///   - name:
                    ///   - description:
                    ///   - color:
                    ///   - _default:
                    package init(
                        id: Swift.Int64? = nil,
                        nodeId: Swift.String? = nil,
                        url: Swift.String? = nil,
                        name: Swift.String? = nil,
                        description: Swift.String? = nil,
                        color: Swift.String? = nil,
                        _default: Swift.Bool? = nil
                    ) {
                        self.id = id
                        self.nodeId = nodeId
                        self.url = url
                        self.name = name
                        self.description = description
                        self.color = color
                        self._default = _default
                    }
                    package enum CodingKeys: String, CodingKey {
                        case id
                        case nodeId = "node_id"
                        case url
                        case name
                        case description
                        case color
                        case _default = "default"
                    }
                }
                /// - Remark: Generated from `#/components/schemas/issue/LabelsPayload/case2`.
                case case2(Components.Schemas.Issue.LabelsPayloadPayload.Case2Payload)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            package typealias LabelsPayload = [Components.Schemas.Issue.LabelsPayloadPayload]
            /// Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///
            /// - Remark: Generated from `#/components/schemas/issue/labels`.
            package var labels: Components.Schemas.Issue.LabelsPayload
            /// - Remark: Generated from `#/components/schemas/issue/assignee`.
            package var assignee: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/issue/assignees`.
            package var assignees: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/issue/milestone`.
            package var milestone: Components.Schemas.NullableMilestone?
            /// - Remark: Generated from `#/components/schemas/issue/locked`.
            package var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/issue/active_lock_reason`.
            package var activeLockReason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/comments`.
            package var comments: Swift.Int
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            package struct PullRequestPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/merged_at`.
                package var mergedAt: Foundation.Date?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/diff_url`.
                package var diffUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/html_url`.
                package var htmlUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/patch_url`.
                package var patchUrl: Swift.String?
                /// - Remark: Generated from `#/components/schemas/issue/pull_request/url`.
                package var url: Swift.String?
                /// Creates a new `PullRequestPayload`.
                ///
                /// - Parameters:
                ///   - mergedAt:
                ///   - diffUrl:
                ///   - htmlUrl:
                ///   - patchUrl:
                ///   - url:
                package init(
                    mergedAt: Foundation.Date? = nil,
                    diffUrl: Swift.String? = nil,
                    htmlUrl: Swift.String? = nil,
                    patchUrl: Swift.String? = nil,
                    url: Swift.String? = nil
                ) {
                    self.mergedAt = mergedAt
                    self.diffUrl = diffUrl
                    self.htmlUrl = htmlUrl
                    self.patchUrl = patchUrl
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case mergedAt = "merged_at"
                    case diffUrl = "diff_url"
                    case htmlUrl = "html_url"
                    case patchUrl = "patch_url"
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/issue/pull_request`.
            package var pullRequest: Components.Schemas.Issue.PullRequestPayload?
            /// - Remark: Generated from `#/components/schemas/issue/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/issue/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/issue/draft`.
            package var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/issue/closed_by`.
            package var closedBy: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/issue/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/timeline_url`.
            package var timelineUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/issue/repository`.
            package var repository: Components.Schemas.Repository?
            /// - Remark: Generated from `#/components/schemas/issue/performed_via_github_app`.
            package var performedViaGithubApp: Components.Schemas.NullableIntegration?
            /// - Remark: Generated from `#/components/schemas/issue/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/issue/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// - Remark: Generated from `#/components/schemas/issue/sub_issues_summary`.
            package var subIssuesSummary: Components.Schemas.SubIssuesSummary?
            /// Creates a new `Issue`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - url: URL for the issue
            ///   - repositoryUrl:
            ///   - labelsUrl:
            ///   - commentsUrl:
            ///   - eventsUrl:
            ///   - htmlUrl:
            ///   - number: Number uniquely identifying the issue within its repository
            ///   - state: State of the issue; either 'open' or 'closed'
            ///   - stateReason: The reason for the current state
            ///   - title: Title of the issue
            ///   - body: Contents of the issue
            ///   - user:
            ///   - labels: Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
            ///   - assignee:
            ///   - assignees:
            ///   - milestone:
            ///   - locked:
            ///   - activeLockReason:
            ///   - comments:
            ///   - pullRequest:
            ///   - closedAt:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - draft:
            ///   - closedBy:
            ///   - bodyHtml:
            ///   - bodyText:
            ///   - timelineUrl:
            ///   - repository:
            ///   - performedViaGithubApp:
            ///   - authorAssociation:
            ///   - reactions:
            ///   - subIssuesSummary:
            package init(
                id: Swift.Int64,
                nodeId: Swift.String,
                url: Swift.String,
                repositoryUrl: Swift.String,
                labelsUrl: Swift.String,
                commentsUrl: Swift.String,
                eventsUrl: Swift.String,
                htmlUrl: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                stateReason: Components.Schemas.Issue.StateReasonPayload? = nil,
                title: Swift.String,
                body: Swift.String? = nil,
                user: Components.Schemas.NullableSimpleUser? = nil,
                labels: Components.Schemas.Issue.LabelsPayload,
                assignee: Components.Schemas.NullableSimpleUser? = nil,
                assignees: [Components.Schemas.SimpleUser]? = nil,
                milestone: Components.Schemas.NullableMilestone? = nil,
                locked: Swift.Bool,
                activeLockReason: Swift.String? = nil,
                comments: Swift.Int,
                pullRequest: Components.Schemas.Issue.PullRequestPayload? = nil,
                closedAt: Foundation.Date? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                draft: Swift.Bool? = nil,
                closedBy: Components.Schemas.NullableSimpleUser? = nil,
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                timelineUrl: Swift.String? = nil,
                repository: Components.Schemas.Repository? = nil,
                performedViaGithubApp: Components.Schemas.NullableIntegration? = nil,
                authorAssociation: Components.Schemas.AuthorAssociation,
                reactions: Components.Schemas.ReactionRollup? = nil,
                subIssuesSummary: Components.Schemas.SubIssuesSummary? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.repositoryUrl = repositoryUrl
                self.labelsUrl = labelsUrl
                self.commentsUrl = commentsUrl
                self.eventsUrl = eventsUrl
                self.htmlUrl = htmlUrl
                self.number = number
                self.state = state
                self.stateReason = stateReason
                self.title = title
                self.body = body
                self.user = user
                self.labels = labels
                self.assignee = assignee
                self.assignees = assignees
                self.milestone = milestone
                self.locked = locked
                self.activeLockReason = activeLockReason
                self.comments = comments
                self.pullRequest = pullRequest
                self.closedAt = closedAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.draft = draft
                self.closedBy = closedBy
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
                self.timelineUrl = timelineUrl
                self.repository = repository
                self.performedViaGithubApp = performedViaGithubApp
                self.authorAssociation = authorAssociation
                self.reactions = reactions
                self.subIssuesSummary = subIssuesSummary
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case repositoryUrl = "repository_url"
                case labelsUrl = "labels_url"
                case commentsUrl = "comments_url"
                case eventsUrl = "events_url"
                case htmlUrl = "html_url"
                case number
                case state
                case stateReason = "state_reason"
                case title
                case body
                case user
                case labels
                case assignee
                case assignees
                case milestone
                case locked
                case activeLockReason = "active_lock_reason"
                case comments
                case pullRequest = "pull_request"
                case closedAt = "closed_at"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case draft
                case closedBy = "closed_by"
                case bodyHtml = "body_html"
                case bodyText = "body_text"
                case timelineUrl = "timeline_url"
                case repository
                case performedViaGithubApp = "performed_via_github_app"
                case authorAssociation = "author_association"
                case reactions
                case subIssuesSummary = "sub_issues_summary"
            }
        }
        /// Public User
        ///
        /// - Remark: Generated from `#/components/schemas/public-user`.
        package struct PublicUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/public-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/public-user/user_view_type`.
            package var userViewType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/followers_url`.
            package var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/following_url`.
            package var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/gists_url`.
            package var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/starred_url`.
            package var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/subscriptions_url`.
            package var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/organizations_url`.
            package var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/received_events_url`.
            package var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/public-user/site_admin`.
            package var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/public-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/company`.
            package var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/blog`.
            package var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/location`.
            package var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/notification_email`.
            package var notificationEmail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/hireable`.
            package var hireable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/public-user/bio`.
            package var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/twitter_username`.
            package var twitterUsername: Swift.String?
            /// - Remark: Generated from `#/components/schemas/public-user/public_repos`.
            package var publicRepos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/public_gists`.
            package var publicGists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/followers`.
            package var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/following`.
            package var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/public-user/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/public-user/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/public-user/plan`.
            package struct PlanPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/public-user/plan/collaborators`.
                package var collaborators: Swift.Int
                /// - Remark: Generated from `#/components/schemas/public-user/plan/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/public-user/plan/space`.
                package var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/public-user/plan/private_repos`.
                package var privateRepos: Swift.Int
                /// Creates a new `PlanPayload`.
                ///
                /// - Parameters:
                ///   - collaborators:
                ///   - name:
                ///   - space:
                ///   - privateRepos:
                package init(
                    collaborators: Swift.Int,
                    name: Swift.String,
                    space: Swift.Int,
                    privateRepos: Swift.Int
                ) {
                    self.collaborators = collaborators
                    self.name = name
                    self.space = space
                    self.privateRepos = privateRepos
                }
                package enum CodingKeys: String, CodingKey {
                    case collaborators
                    case name
                    case space
                    case privateRepos = "private_repos"
                }
            }
            /// - Remark: Generated from `#/components/schemas/public-user/plan`.
            package var plan: Components.Schemas.PublicUser.PlanPayload?
            /// - Remark: Generated from `#/components/schemas/public-user/private_gists`.
            package var privateGists: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/total_private_repos`.
            package var totalPrivateRepos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/owned_private_repos`.
            package var ownedPrivateRepos: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/disk_usage`.
            package var diskUsage: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/public-user/collaborators`.
            package var collaborators: Swift.Int?
            /// Creates a new `PublicUser`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - userViewType:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - notificationEmail:
            ///   - hireable:
            ///   - bio:
            ///   - twitterUsername:
            ///   - publicRepos:
            ///   - publicGists:
            ///   - followers:
            ///   - following:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - plan:
            ///   - privateGists:
            ///   - totalPrivateRepos:
            ///   - ownedPrivateRepos:
            ///   - diskUsage:
            ///   - collaborators:
            package init(
                login: Swift.String,
                id: Swift.Int64,
                userViewType: Swift.String? = nil,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                notificationEmail: Swift.String? = nil,
                hireable: Swift.Bool? = nil,
                bio: Swift.String? = nil,
                twitterUsername: Swift.String? = nil,
                publicRepos: Swift.Int,
                publicGists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                plan: Components.Schemas.PublicUser.PlanPayload? = nil,
                privateGists: Swift.Int? = nil,
                totalPrivateRepos: Swift.Int? = nil,
                ownedPrivateRepos: Swift.Int? = nil,
                diskUsage: Swift.Int? = nil,
                collaborators: Swift.Int? = nil
            ) {
                self.login = login
                self.id = id
                self.userViewType = userViewType
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.notificationEmail = notificationEmail
                self.hireable = hireable
                self.bio = bio
                self.twitterUsername = twitterUsername
                self.publicRepos = publicRepos
                self.publicGists = publicGists
                self.followers = followers
                self.following = following
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.plan = plan
                self.privateGists = privateGists
                self.totalPrivateRepos = totalPrivateRepos
                self.ownedPrivateRepos = ownedPrivateRepos
                self.diskUsage = diskUsage
                self.collaborators = collaborators
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case userViewType = "user_view_type"
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case name
                case company
                case blog
                case location
                case email
                case notificationEmail = "notification_email"
                case hireable
                case bio
                case twitterUsername = "twitter_username"
                case publicRepos = "public_repos"
                case publicGists = "public_gists"
                case followers
                case following
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case plan
                case privateGists = "private_gists"
                case totalPrivateRepos = "total_private_repos"
                case ownedPrivateRepos = "owned_private_repos"
                case diskUsage = "disk_usage"
                case collaborators
            }
            package init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.login = try container.decode(
                    Swift.String.self,
                    forKey: .login
                )
                self.id = try container.decode(
                    Swift.Int64.self,
                    forKey: .id
                )
                self.userViewType = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .userViewType
                )
                self.nodeId = try container.decode(
                    Swift.String.self,
                    forKey: .nodeId
                )
                self.avatarUrl = try container.decode(
                    Swift.String.self,
                    forKey: .avatarUrl
                )
                self.gravatarId = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .gravatarId
                )
                self.url = try container.decode(
                    Swift.String.self,
                    forKey: .url
                )
                self.htmlUrl = try container.decode(
                    Swift.String.self,
                    forKey: .htmlUrl
                )
                self.followersUrl = try container.decode(
                    Swift.String.self,
                    forKey: .followersUrl
                )
                self.followingUrl = try container.decode(
                    Swift.String.self,
                    forKey: .followingUrl
                )
                self.gistsUrl = try container.decode(
                    Swift.String.self,
                    forKey: .gistsUrl
                )
                self.starredUrl = try container.decode(
                    Swift.String.self,
                    forKey: .starredUrl
                )
                self.subscriptionsUrl = try container.decode(
                    Swift.String.self,
                    forKey: .subscriptionsUrl
                )
                self.organizationsUrl = try container.decode(
                    Swift.String.self,
                    forKey: .organizationsUrl
                )
                self.reposUrl = try container.decode(
                    Swift.String.self,
                    forKey: .reposUrl
                )
                self.eventsUrl = try container.decode(
                    Swift.String.self,
                    forKey: .eventsUrl
                )
                self.receivedEventsUrl = try container.decode(
                    Swift.String.self,
                    forKey: .receivedEventsUrl
                )
                self._type = try container.decode(
                    Swift.String.self,
                    forKey: ._type
                )
                self.siteAdmin = try container.decode(
                    Swift.Bool.self,
                    forKey: .siteAdmin
                )
                self.name = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .name
                )
                self.company = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .company
                )
                self.blog = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .blog
                )
                self.location = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .location
                )
                self.email = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .email
                )
                self.notificationEmail = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .notificationEmail
                )
                self.hireable = try container.decodeIfPresent(
                    Swift.Bool.self,
                    forKey: .hireable
                )
                self.bio = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .bio
                )
                self.twitterUsername = try container.decodeIfPresent(
                    Swift.String.self,
                    forKey: .twitterUsername
                )
                self.publicRepos = try container.decode(
                    Swift.Int.self,
                    forKey: .publicRepos
                )
                self.publicGists = try container.decode(
                    Swift.Int.self,
                    forKey: .publicGists
                )
                self.followers = try container.decode(
                    Swift.Int.self,
                    forKey: .followers
                )
                self.following = try container.decode(
                    Swift.Int.self,
                    forKey: .following
                )
                self.createdAt = try container.decode(
                    Foundation.Date.self,
                    forKey: .createdAt
                )
                self.updatedAt = try container.decode(
                    Foundation.Date.self,
                    forKey: .updatedAt
                )
                self.plan = try container.decodeIfPresent(
                    Components.Schemas.PublicUser.PlanPayload.self,
                    forKey: .plan
                )
                self.privateGists = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .privateGists
                )
                self.totalPrivateRepos = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .totalPrivateRepos
                )
                self.ownedPrivateRepos = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .ownedPrivateRepos
                )
                self.diskUsage = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .diskUsage
                )
                self.collaborators = try container.decodeIfPresent(
                    Swift.Int.self,
                    forKey: .collaborators
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "login",
                    "id",
                    "user_view_type",
                    "node_id",
                    "avatar_url",
                    "gravatar_id",
                    "url",
                    "html_url",
                    "followers_url",
                    "following_url",
                    "gists_url",
                    "starred_url",
                    "subscriptions_url",
                    "organizations_url",
                    "repos_url",
                    "events_url",
                    "received_events_url",
                    "type",
                    "site_admin",
                    "name",
                    "company",
                    "blog",
                    "location",
                    "email",
                    "notification_email",
                    "hireable",
                    "bio",
                    "twitter_username",
                    "public_repos",
                    "public_gists",
                    "followers",
                    "following",
                    "created_at",
                    "updated_at",
                    "plan",
                    "private_gists",
                    "total_private_repos",
                    "owned_private_repos",
                    "disk_usage",
                    "collaborators"
                ])
            }
        }
        /// An object without any properties.
        ///
        /// - Remark: Generated from `#/components/schemas/empty-object`.
        package struct EmptyObject: Codable, Hashable, Sendable {
            /// Creates a new `EmptyObject`.
            package init() {}
            package init(from decoder: any Decoder) throws {
                try decoder.ensureNoAdditionalProperties(knownKeys: [])
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-team-simple`.
        package struct NullableTeamSimple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/node_id`.
            package var nodeId: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/members_url`.
            package var membersUrl: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/name`.
            package var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/description`.
            package var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/permission`.
            package var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/privacy`.
            package var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/notification_setting`.
            package var notificationSetting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/repositories_url`.
            package var repositoriesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/slug`.
            package var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/nullable-team-simple/ldap_dn`.
            package var ldapDn: Swift.String?
            /// Creates a new `NullableTeamSimple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - nodeId:
            ///   - url: URL for the team
            ///   - membersUrl:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notificationSetting: The notification setting the team has set
            ///   - htmlUrl:
            ///   - repositoriesUrl:
            ///   - slug:
            ///   - ldapDn: Distinguished Name (DN) that team maps to within LDAP environment
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                membersUrl: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notificationSetting: Swift.String? = nil,
                htmlUrl: Swift.String,
                repositoriesUrl: Swift.String,
                slug: Swift.String,
                ldapDn: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.membersUrl = membersUrl
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notificationSetting = notificationSetting
                self.htmlUrl = htmlUrl
                self.repositoriesUrl = repositoriesUrl
                self.slug = slug
                self.ldapDn = ldapDn
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case membersUrl = "members_url"
                case name
                case description
                case permission
                case privacy
                case notificationSetting = "notification_setting"
                case htmlUrl = "html_url"
                case repositoriesUrl = "repositories_url"
                case slug
                case ldapDn = "ldap_dn"
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team`.
        package struct Team: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/team/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/slug`.
            package var slug: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/description`.
            package var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/privacy`.
            package var privacy: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/notification_setting`.
            package var notificationSetting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team/permission`.
            package var permission: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            package struct PermissionsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/team/permissions/pull`.
                package var pull: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/triage`.
                package var triage: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/push`.
                package var push: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/maintain`.
                package var maintain: Swift.Bool
                /// - Remark: Generated from `#/components/schemas/team/permissions/admin`.
                package var admin: Swift.Bool
                /// Creates a new `PermissionsPayload`.
                ///
                /// - Parameters:
                ///   - pull:
                ///   - triage:
                ///   - push:
                ///   - maintain:
                ///   - admin:
                package init(
                    pull: Swift.Bool,
                    triage: Swift.Bool,
                    push: Swift.Bool,
                    maintain: Swift.Bool,
                    admin: Swift.Bool
                ) {
                    self.pull = pull
                    self.triage = triage
                    self.push = push
                    self.maintain = maintain
                    self.admin = admin
                }
                package enum CodingKeys: String, CodingKey {
                    case pull
                    case triage
                    case push
                    case maintain
                    case admin
                }
            }
            /// - Remark: Generated from `#/components/schemas/team/permissions`.
            package var permissions: Components.Schemas.Team.PermissionsPayload?
            /// - Remark: Generated from `#/components/schemas/team/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/members_url`.
            package var membersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/repositories_url`.
            package var repositoriesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team/parent`.
            package var parent: Components.Schemas.NullableTeamSimple?
            /// Creates a new `Team`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - nodeId:
            ///   - name:
            ///   - slug:
            ///   - description:
            ///   - privacy:
            ///   - notificationSetting:
            ///   - permission:
            ///   - permissions:
            ///   - url:
            ///   - htmlUrl:
            ///   - membersUrl:
            ///   - repositoriesUrl:
            ///   - parent:
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                slug: Swift.String,
                description: Swift.String? = nil,
                privacy: Swift.String? = nil,
                notificationSetting: Swift.String? = nil,
                permission: Swift.String,
                permissions: Components.Schemas.Team.PermissionsPayload? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                membersUrl: Swift.String,
                repositoriesUrl: Swift.String,
                parent: Components.Schemas.NullableTeamSimple? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.slug = slug
                self.description = description
                self.privacy = privacy
                self.notificationSetting = notificationSetting
                self.permission = permission
                self.permissions = permissions
                self.url = url
                self.htmlUrl = htmlUrl
                self.membersUrl = membersUrl
                self.repositoriesUrl = repositoriesUrl
                self.parent = parent
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case name
                case slug
                case description
                case privacy
                case notificationSetting = "notification_setting"
                case permission
                case permissions
                case url
                case htmlUrl = "html_url"
                case membersUrl = "members_url"
                case repositoriesUrl = "repositories_url"
                case parent
            }
        }
        /// Groups of organization members that gives permissions on specified repositories.
        ///
        /// - Remark: Generated from `#/components/schemas/team-simple`.
        package struct TeamSimple: Codable, Hashable, Sendable {
            /// Unique identifier of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/team-simple/node_id`.
            package var nodeId: Swift.String
            /// URL for the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/members_url`.
            package var membersUrl: Swift.String
            /// Name of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/name`.
            package var name: Swift.String
            /// Description of the team
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/description`.
            package var description: Swift.String?
            /// Permission that the team will have for its repositories
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/permission`.
            package var permission: Swift.String
            /// The level of privacy this team should have
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/privacy`.
            package var privacy: Swift.String?
            /// The notification setting the team has set
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/notification_setting`.
            package var notificationSetting: Swift.String?
            /// - Remark: Generated from `#/components/schemas/team-simple/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/repositories_url`.
            package var repositoriesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/team-simple/slug`.
            package var slug: Swift.String
            /// Distinguished Name (DN) that team maps to within LDAP environment
            ///
            /// - Remark: Generated from `#/components/schemas/team-simple/ldap_dn`.
            package var ldapDn: Swift.String?
            /// Creates a new `TeamSimple`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the team
            ///   - nodeId:
            ///   - url: URL for the team
            ///   - membersUrl:
            ///   - name: Name of the team
            ///   - description: Description of the team
            ///   - permission: Permission that the team will have for its repositories
            ///   - privacy: The level of privacy this team should have
            ///   - notificationSetting: The notification setting the team has set
            ///   - htmlUrl:
            ///   - repositoriesUrl:
            ///   - slug:
            ///   - ldapDn: Distinguished Name (DN) that team maps to within LDAP environment
            package init(
                id: Swift.Int,
                nodeId: Swift.String,
                url: Swift.String,
                membersUrl: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                permission: Swift.String,
                privacy: Swift.String? = nil,
                notificationSetting: Swift.String? = nil,
                htmlUrl: Swift.String,
                repositoriesUrl: Swift.String,
                slug: Swift.String,
                ldapDn: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.membersUrl = membersUrl
                self.name = name
                self.description = description
                self.permission = permission
                self.privacy = privacy
                self.notificationSetting = notificationSetting
                self.htmlUrl = htmlUrl
                self.repositoriesUrl = repositoriesUrl
                self.slug = slug
                self.ldapDn = ldapDn
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case membersUrl = "members_url"
                case name
                case description
                case permission
                case privacy
                case notificationSetting = "notification_setting"
                case htmlUrl = "html_url"
                case repositoriesUrl = "repositories_url"
                case slug
                case ldapDn = "ldap_dn"
            }
        }
        /// Project cards represent a scope of work.
        ///
        /// - Remark: Generated from `#/components/schemas/project-card`.
        package struct ProjectCard: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/project-card/url`.
            package var url: Swift.String
            /// The project card's ID
            ///
            /// - Remark: Generated from `#/components/schemas/project-card/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/project-card/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-card/note`.
            package var note: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/creator`.
            package var creator: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/project-card/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/project-card/updated_at`.
            package var updatedAt: Foundation.Date
            /// Whether or not the card is archived
            ///
            /// - Remark: Generated from `#/components/schemas/project-card/archived`.
            package var archived: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/project-card/column_name`.
            package var columnName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/project_id`.
            package var projectId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/column_url`.
            package var columnUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/project-card/content_url`.
            package var contentUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/project-card/project_url`.
            package var projectUrl: Swift.String
            /// Creates a new `ProjectCard`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id: The project card's ID
            ///   - nodeId:
            ///   - note:
            ///   - creator:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - archived: Whether or not the card is archived
            ///   - columnName:
            ///   - projectId:
            ///   - columnUrl:
            ///   - contentUrl:
            ///   - projectUrl:
            package init(
                url: Swift.String,
                id: Swift.Int64,
                nodeId: Swift.String,
                note: Swift.String? = nil,
                creator: Components.Schemas.NullableSimpleUser? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                archived: Swift.Bool? = nil,
                columnName: Swift.String? = nil,
                projectId: Swift.String? = nil,
                columnUrl: Swift.String,
                contentUrl: Swift.String? = nil,
                projectUrl: Swift.String
            ) {
                self.url = url
                self.id = id
                self.nodeId = nodeId
                self.note = note
                self.creator = creator
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.archived = archived
                self.columnName = columnName
                self.projectId = projectId
                self.columnUrl = columnUrl
                self.contentUrl = contentUrl
                self.projectUrl = projectUrl
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case nodeId = "node_id"
                case note
                case creator
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case archived
                case columnName = "column_name"
                case projectId = "project_id"
                case columnUrl = "column_url"
                case contentUrl = "content_url"
                case projectUrl = "project_url"
            }
        }
        /// Metaproperties for Git author/committer information.
        ///
        /// - Remark: Generated from `#/components/schemas/nullable-git-user`.
        package struct NullableGitUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/nullable-git-user/date`.
            package var date: Swift.String?
            /// Creates a new `NullableGitUser`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - date:
            package init(
                name: Swift.String? = nil,
                email: Swift.String? = nil,
                date: Swift.String? = nil
            ) {
                self.name = name
                self.email = email
                self.date = date
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case email
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/verification`.
        package struct Verification: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/verification/verified`.
            package var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/verification/reason`.
            package var reason: Swift.String
            /// - Remark: Generated from `#/components/schemas/verification/payload`.
            package var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/signature`.
            package var signature: Swift.String?
            /// - Remark: Generated from `#/components/schemas/verification/verified_at`.
            package var verifiedAt: Swift.String?
            /// Creates a new `Verification`.
            ///
            /// - Parameters:
            ///   - verified:
            ///   - reason:
            ///   - payload:
            ///   - signature:
            ///   - verifiedAt:
            package init(
                verified: Swift.Bool,
                reason: Swift.String,
                payload: Swift.String? = nil,
                signature: Swift.String? = nil,
                verifiedAt: Swift.String? = nil
            ) {
                self.verified = verified
                self.reason = reason
                self.payload = payload
                self.signature = signature
                self.verifiedAt = verifiedAt
            }
            package enum CodingKeys: String, CodingKey {
                case verified
                case reason
                case payload
                case signature
                case verifiedAt = "verified_at"
            }
        }
        /// Diff Entry
        ///
        /// - Remark: Generated from `#/components/schemas/diff-entry`.
        package struct DiffEntry: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/diff-entry/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/filename`.
            package var filename: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            @frozen package enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case added = "added"
                case removed = "removed"
                case modified = "modified"
                case renamed = "renamed"
                case copied = "copied"
                case changed = "changed"
                case unchanged = "unchanged"
            }
            /// - Remark: Generated from `#/components/schemas/diff-entry/status`.
            package var status: Components.Schemas.DiffEntry.StatusPayload
            /// - Remark: Generated from `#/components/schemas/diff-entry/additions`.
            package var additions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/deletions`.
            package var deletions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/changes`.
            package var changes: Swift.Int
            /// - Remark: Generated from `#/components/schemas/diff-entry/blob_url`.
            package var blobUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/raw_url`.
            package var rawUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/contents_url`.
            package var contentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/diff-entry/patch`.
            package var patch: Swift.String?
            /// - Remark: Generated from `#/components/schemas/diff-entry/previous_filename`.
            package var previousFilename: Swift.String?
            /// Creates a new `DiffEntry`.
            ///
            /// - Parameters:
            ///   - sha:
            ///   - filename:
            ///   - status:
            ///   - additions:
            ///   - deletions:
            ///   - changes:
            ///   - blobUrl:
            ///   - rawUrl:
            ///   - contentsUrl:
            ///   - patch:
            ///   - previousFilename:
            package init(
                sha: Swift.String,
                filename: Swift.String,
                status: Components.Schemas.DiffEntry.StatusPayload,
                additions: Swift.Int,
                deletions: Swift.Int,
                changes: Swift.Int,
                blobUrl: Swift.String,
                rawUrl: Swift.String,
                contentsUrl: Swift.String,
                patch: Swift.String? = nil,
                previousFilename: Swift.String? = nil
            ) {
                self.sha = sha
                self.filename = filename
                self.status = status
                self.additions = additions
                self.deletions = deletions
                self.changes = changes
                self.blobUrl = blobUrl
                self.rawUrl = rawUrl
                self.contentsUrl = contentsUrl
                self.patch = patch
                self.previousFilename = previousFilename
            }
            package enum CodingKeys: String, CodingKey {
                case sha
                case filename
                case status
                case additions
                case deletions
                case changes
                case blobUrl = "blob_url"
                case rawUrl = "raw_url"
                case contentsUrl = "contents_url"
                case patch
                case previousFilename = "previous_filename"
            }
        }
        /// Commit
        ///
        /// - Remark: Generated from `#/components/schemas/commit`.
        package struct Commit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/sha`.
            package var sha: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            package struct CommitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/commit/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/author`.
                package var author: Components.Schemas.NullableGitUser?
                /// - Remark: Generated from `#/components/schemas/commit/commit/committer`.
                package var committer: Components.Schemas.NullableGitUser?
                /// - Remark: Generated from `#/components/schemas/commit/commit/message`.
                package var message: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/commit/comment_count`.
                package var commentCount: Swift.Int
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                package struct TreePayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/sha`.
                    package var sha: Swift.String
                    /// - Remark: Generated from `#/components/schemas/commit/commit/tree/url`.
                    package var url: Swift.String
                    /// Creates a new `TreePayload`.
                    ///
                    /// - Parameters:
                    ///   - sha:
                    ///   - url:
                    package init(
                        sha: Swift.String,
                        url: Swift.String
                    ) {
                        self.sha = sha
                        self.url = url
                    }
                    package enum CodingKeys: String, CodingKey {
                        case sha
                        case url
                    }
                }
                /// - Remark: Generated from `#/components/schemas/commit/commit/tree`.
                package var tree: Components.Schemas.Commit.CommitPayload.TreePayload
                /// - Remark: Generated from `#/components/schemas/commit/commit/verification`.
                package var verification: Components.Schemas.Verification?
                /// Creates a new `CommitPayload`.
                ///
                /// - Parameters:
                ///   - url:
                ///   - author:
                ///   - committer:
                ///   - message:
                ///   - commentCount:
                ///   - tree:
                ///   - verification:
                package init(
                    url: Swift.String,
                    author: Components.Schemas.NullableGitUser? = nil,
                    committer: Components.Schemas.NullableGitUser? = nil,
                    message: Swift.String,
                    commentCount: Swift.Int,
                    tree: Components.Schemas.Commit.CommitPayload.TreePayload,
                    verification: Components.Schemas.Verification? = nil
                ) {
                    self.url = url
                    self.author = author
                    self.committer = committer
                    self.message = message
                    self.commentCount = commentCount
                    self.tree = tree
                    self.verification = verification
                }
                package enum CodingKeys: String, CodingKey {
                    case url
                    case author
                    case committer
                    case message
                    case commentCount = "comment_count"
                    case tree
                    case verification
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/commit`.
            package var commit: Components.Schemas.Commit.CommitPayload
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            @frozen package enum AuthorPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/author/case1`.
                case SimpleUser(Components.Schemas.SimpleUser)
                /// - Remark: Generated from `#/components/schemas/commit/author/case2`.
                case EmptyObject(Components.Schemas.EmptyObject)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .SimpleUser(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EmptyObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .SimpleUser(value):
                        try value.encode(to: encoder)
                    case let .EmptyObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/author`.
            package var author: Components.Schemas.Commit.AuthorPayload?
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            @frozen package enum CommitterPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/committer/case1`.
                case SimpleUser(Components.Schemas.SimpleUser)
                /// - Remark: Generated from `#/components/schemas/commit/committer/case2`.
                case EmptyObject(Components.Schemas.EmptyObject)
                package init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .SimpleUser(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EmptyObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                package func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .SimpleUser(value):
                        try value.encode(to: encoder)
                    case let .EmptyObject(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/committer`.
            package var committer: Components.Schemas.Commit.CommitterPayload?
            /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload`.
            package struct ParentsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/commit/ParentsPayload/html_url`.
                package var htmlUrl: Swift.String?
                /// Creates a new `ParentsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                ///   - htmlUrl:
                package init(
                    sha: Swift.String,
                    url: Swift.String,
                    htmlUrl: Swift.String? = nil
                ) {
                    self.sha = sha
                    self.url = url
                    self.htmlUrl = htmlUrl
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                    case htmlUrl = "html_url"
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            package typealias ParentsPayload = [Components.Schemas.Commit.ParentsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/commit/parents`.
            package var parents: Components.Schemas.Commit.ParentsPayload
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            package struct StatsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/commit/stats/additions`.
                package var additions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/deletions`.
                package var deletions: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/commit/stats/total`.
                package var total: Swift.Int?
                /// Creates a new `StatsPayload`.
                ///
                /// - Parameters:
                ///   - additions:
                ///   - deletions:
                ///   - total:
                package init(
                    additions: Swift.Int? = nil,
                    deletions: Swift.Int? = nil,
                    total: Swift.Int? = nil
                ) {
                    self.additions = additions
                    self.deletions = deletions
                    self.total = total
                }
                package enum CodingKeys: String, CodingKey {
                    case additions
                    case deletions
                    case total
                }
            }
            /// - Remark: Generated from `#/components/schemas/commit/stats`.
            package var stats: Components.Schemas.Commit.StatsPayload?
            /// - Remark: Generated from `#/components/schemas/commit/files`.
            package var files: [Components.Schemas.DiffEntry]?
            /// Creates a new `Commit`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - sha:
            ///   - nodeId:
            ///   - htmlUrl:
            ///   - commentsUrl:
            ///   - commit:
            ///   - author:
            ///   - committer:
            ///   - parents:
            ///   - stats:
            ///   - files:
            package init(
                url: Swift.String,
                sha: Swift.String,
                nodeId: Swift.String,
                htmlUrl: Swift.String,
                commentsUrl: Swift.String,
                commit: Components.Schemas.Commit.CommitPayload,
                author: Components.Schemas.Commit.AuthorPayload? = nil,
                committer: Components.Schemas.Commit.CommitterPayload? = nil,
                parents: Components.Schemas.Commit.ParentsPayload,
                stats: Components.Schemas.Commit.StatsPayload? = nil,
                files: [Components.Schemas.DiffEntry]? = nil
            ) {
                self.url = url
                self.sha = sha
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
                self.commentsUrl = commentsUrl
                self.commit = commit
                self.author = author
                self.committer = committer
                self.parents = parents
                self.stats = stats
                self.files = files
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case sha
                case nodeId = "node_id"
                case htmlUrl = "html_url"
                case commentsUrl = "comments_url"
                case commit
                case author
                case committer
                case parents
                case stats
                case files
            }
        }
        /// A commit.
        ///
        /// - Remark: Generated from `#/components/schemas/simple-commit`.
        package struct SimpleCommit: Codable, Hashable, Sendable {
            /// SHA for the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/id`.
            package var id: Swift.String
            /// SHA for the commit's tree
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/tree_id`.
            package var treeId: Swift.String
            /// Message describing the purpose of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/message`.
            package var message: Swift.String
            /// Timestamp of the commit
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/timestamp`.
            package var timestamp: Foundation.Date
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            package struct AuthorPayload: Codable, Hashable, Sendable {
                /// Name of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/name`.
                package var name: Swift.String
                /// Git email address of the commit's author
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/author/email`.
                package var email: Swift.String
                /// Creates a new `AuthorPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's author
                ///   - email: Git email address of the commit's author
                package init(
                    name: Swift.String,
                    email: Swift.String
                ) {
                    self.name = name
                    self.email = email
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git author
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/author`.
            package var author: Components.Schemas.SimpleCommit.AuthorPayload?
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            package struct CommitterPayload: Codable, Hashable, Sendable {
                /// Name of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/name`.
                package var name: Swift.String
                /// Git email address of the commit's committer
                ///
                /// - Remark: Generated from `#/components/schemas/simple-commit/committer/email`.
                package var email: Swift.String?
                /// Creates a new `CommitterPayload`.
                ///
                /// - Parameters:
                ///   - name: Name of the commit's committer
                ///   - email: Git email address of the commit's committer
                package init(
                    name: Swift.String,
                    email: Swift.String? = nil
                ) {
                    self.name = name
                    self.email = email
                }
                package enum CodingKeys: String, CodingKey {
                    case name
                    case email
                }
            }
            /// Information about the Git committer
            ///
            /// - Remark: Generated from `#/components/schemas/simple-commit/committer`.
            package var committer: Components.Schemas.SimpleCommit.CommitterPayload?
            /// Creates a new `SimpleCommit`.
            ///
            /// - Parameters:
            ///   - id: SHA for the commit
            ///   - treeId: SHA for the commit's tree
            ///   - message: Message describing the purpose of the commit
            ///   - timestamp: Timestamp of the commit
            ///   - author: Information about the Git author
            ///   - committer: Information about the Git committer
            package init(
                id: Swift.String,
                treeId: Swift.String,
                message: Swift.String,
                timestamp: Foundation.Date,
                author: Components.Schemas.SimpleCommit.AuthorPayload? = nil,
                committer: Components.Schemas.SimpleCommit.CommitterPayload? = nil
            ) {
                self.id = id
                self.treeId = treeId
                self.message = message
                self.timestamp = timestamp
                self.author = author
                self.committer = committer
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case treeId = "tree_id"
                case message
                case timestamp
                case author
                case committer
            }
        }
        /// Hypermedia Link
        ///
        /// - Remark: Generated from `#/components/schemas/link`.
        package struct Link: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/link/href`.
            package var href: Swift.String
            /// Creates a new `Link`.
            ///
            /// - Parameters:
            ///   - href:
            package init(href: Swift.String) {
                self.href = href
            }
            package enum CodingKeys: String, CodingKey {
                case href
            }
        }
        /// The status of auto merging a pull request.
        ///
        /// - Remark: Generated from `#/components/schemas/auto-merge`.
        package struct AutoMerge: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/auto-merge/enabled_by`.
            package var enabledBy: Components.Schemas.SimpleUser
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            @frozen package enum MergeMethodPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case merge = "merge"
                case squash = "squash"
                case rebase = "rebase"
            }
            /// The merge method to use.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/merge_method`.
            package var mergeMethod: Components.Schemas.AutoMerge.MergeMethodPayload
            /// Title for the merge commit message.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_title`.
            package var commitTitle: Swift.String?
            /// Commit message for the merge commit.
            ///
            /// - Remark: Generated from `#/components/schemas/auto-merge/commit_message`.
            package var commitMessage: Swift.String?
            /// Creates a new `AutoMerge`.
            ///
            /// - Parameters:
            ///   - enabledBy:
            ///   - mergeMethod: The merge method to use.
            ///   - commitTitle: Title for the merge commit message.
            ///   - commitMessage: Commit message for the merge commit.
            package init(
                enabledBy: Components.Schemas.SimpleUser,
                mergeMethod: Components.Schemas.AutoMerge.MergeMethodPayload,
                commitTitle: Swift.String? = nil,
                commitMessage: Swift.String? = nil
            ) {
                self.enabledBy = enabledBy
                self.mergeMethod = mergeMethod
                self.commitTitle = commitTitle
                self.commitMessage = commitMessage
            }
            package enum CodingKeys: String, CodingKey {
                case enabledBy = "enabled_by"
                case mergeMethod = "merge_method"
                case commitTitle = "commit_title"
                case commitMessage = "commit_message"
            }
        }
        /// Pull Request Simple
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-simple`.
        package struct PullRequestSimple: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/diff_url`.
            package var diffUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/patch_url`.
            package var patchUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/issue_url`.
            package var issueUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comments_url`.
            package var reviewCommentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/review_comment_url`.
            package var reviewCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/statuses_url`.
            package var statusesUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/number`.
            package var number: Swift.Int
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/locked`.
            package var locked: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload`.
            package struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/id`.
                package var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/node_id`.
                package var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/color`.
                package var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/LabelsPayload/default`.
                package var _default: Swift.Bool
                /// Creates a new `LabelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                package init(
                    id: Swift.Int64,
                    nodeId: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String? = nil,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            package typealias LabelsPayload = [Components.Schemas.PullRequestSimple.LabelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/labels`.
            package var labels: Components.Schemas.PullRequestSimple.LabelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/milestone`.
            package var milestone: Components.Schemas.NullableMilestone?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/active_lock_reason`.
            package var activeLockReason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merged_at`.
            package var mergedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/merge_commit_sha`.
            package var mergeCommitSha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignee`.
            package var assignee: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/assignees`.
            package var assignees: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_reviewers`.
            package var requestedReviewers: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/requested_teams`.
            package var requestedTeams: [Components.Schemas.Team]?
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            package struct HeadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/repo`.
                package var repo: Components.Schemas.Repository?
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/head/user`.
                package var user: Components.Schemas.NullableSimpleUser?
                /// Creates a new `HeadPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.Repository? = nil,
                    sha: Swift.String,
                    user: Components.Schemas.NullableSimpleUser? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/head`.
            package var head: Components.Schemas.PullRequestSimple.HeadPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            package struct BasePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/repo`.
                package var repo: Components.Schemas.Repository
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/base/user`.
                package var user: Components.Schemas.NullableSimpleUser?
                /// Creates a new `BasePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.Repository,
                    sha: Swift.String,
                    user: Components.Schemas.NullableSimpleUser? = nil
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/base`.
            package var base: Components.Schemas.PullRequestSimple.BasePayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/comments`.
                package var comments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/commits`.
                package var commits: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/statuses`.
                package var statuses: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/html`.
                package var html: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/issue`.
                package var issue: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comments`.
                package var reviewComments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/review_comment`.
                package var reviewComment: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links/self`.
                package var _self: Components.Schemas.Link
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - reviewComments:
                ///   - reviewComment:
                ///   - _self:
                package init(
                    comments: Components.Schemas.Link,
                    commits: Components.Schemas.Link,
                    statuses: Components.Schemas.Link,
                    html: Components.Schemas.Link,
                    issue: Components.Schemas.Link,
                    reviewComments: Components.Schemas.Link,
                    reviewComment: Components.Schemas.Link,
                    _self: Components.Schemas.Link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.reviewComments = reviewComments
                    self.reviewComment = reviewComment
                    self._self = _self
                }
                package enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case reviewComments = "review_comments"
                    case reviewComment = "review_comment"
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/_links`.
            package var _links: Components.Schemas.PullRequestSimple._LinksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/auto_merge`.
            package var autoMerge: Components.Schemas.AutoMerge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-simple/draft`.
            package var draft: Swift.Bool?
            /// Creates a new `PullRequestSimple`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - nodeId:
            ///   - htmlUrl:
            ///   - diffUrl:
            ///   - patchUrl:
            ///   - issueUrl:
            ///   - commitsUrl:
            ///   - reviewCommentsUrl:
            ///   - reviewCommentUrl:
            ///   - commentsUrl:
            ///   - statusesUrl:
            ///   - number:
            ///   - state:
            ///   - locked:
            ///   - title:
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - activeLockReason:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - closedAt:
            ///   - mergedAt:
            ///   - mergeCommitSha:
            ///   - assignee:
            ///   - assignees:
            ///   - requestedReviewers:
            ///   - requestedTeams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - authorAssociation:
            ///   - autoMerge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            package init(
                url: Swift.String,
                id: Swift.Int64,
                nodeId: Swift.String,
                htmlUrl: Swift.String,
                diffUrl: Swift.String,
                patchUrl: Swift.String,
                issueUrl: Swift.String,
                commitsUrl: Swift.String,
                reviewCommentsUrl: Swift.String,
                reviewCommentUrl: Swift.String,
                commentsUrl: Swift.String,
                statusesUrl: Swift.String,
                number: Swift.Int,
                state: Swift.String,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.NullableSimpleUser? = nil,
                body: Swift.String? = nil,
                labels: Components.Schemas.PullRequestSimple.LabelsPayload,
                milestone: Components.Schemas.NullableMilestone? = nil,
                activeLockReason: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                closedAt: Foundation.Date? = nil,
                mergedAt: Foundation.Date? = nil,
                mergeCommitSha: Swift.String? = nil,
                assignee: Components.Schemas.NullableSimpleUser? = nil,
                assignees: [Components.Schemas.SimpleUser]? = nil,
                requestedReviewers: [Components.Schemas.SimpleUser]? = nil,
                requestedTeams: [Components.Schemas.Team]? = nil,
                head: Components.Schemas.PullRequestSimple.HeadPayload,
                base: Components.Schemas.PullRequestSimple.BasePayload,
                _links: Components.Schemas.PullRequestSimple._LinksPayload,
                authorAssociation: Components.Schemas.AuthorAssociation,
                autoMerge: Components.Schemas.AutoMerge? = nil,
                draft: Swift.Bool? = nil
            ) {
                self.url = url
                self.id = id
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
                self.diffUrl = diffUrl
                self.patchUrl = patchUrl
                self.issueUrl = issueUrl
                self.commitsUrl = commitsUrl
                self.reviewCommentsUrl = reviewCommentsUrl
                self.reviewCommentUrl = reviewCommentUrl
                self.commentsUrl = commentsUrl
                self.statusesUrl = statusesUrl
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.activeLockReason = activeLockReason
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.closedAt = closedAt
                self.mergedAt = mergedAt
                self.mergeCommitSha = mergeCommitSha
                self.assignee = assignee
                self.assignees = assignees
                self.requestedReviewers = requestedReviewers
                self.requestedTeams = requestedTeams
                self.head = head
                self.base = base
                self._links = _links
                self.authorAssociation = authorAssociation
                self.autoMerge = autoMerge
                self.draft = draft
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case nodeId = "node_id"
                case htmlUrl = "html_url"
                case diffUrl = "diff_url"
                case patchUrl = "patch_url"
                case issueUrl = "issue_url"
                case commitsUrl = "commits_url"
                case reviewCommentsUrl = "review_comments_url"
                case reviewCommentUrl = "review_comment_url"
                case commentsUrl = "comments_url"
                case statusesUrl = "statuses_url"
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case activeLockReason = "active_lock_reason"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case closedAt = "closed_at"
                case mergedAt = "merged_at"
                case mergeCommitSha = "merge_commit_sha"
                case assignee
                case assignees
                case requestedReviewers = "requested_reviewers"
                case requestedTeams = "requested_teams"
                case head
                case base
                case _links
                case authorAssociation = "author_association"
                case autoMerge = "auto_merge"
                case draft
            }
        }
        /// Commit Comparison
        ///
        /// - Remark: Generated from `#/components/schemas/commit-comparison`.
        package struct CommitComparison: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/commit-comparison/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/permalink_url`.
            package var permalinkUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/diff_url`.
            package var diffUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/patch_url`.
            package var patchUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/commit-comparison/base_commit`.
            package var baseCommit: Components.Schemas.Commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/merge_base_commit`.
            package var mergeBaseCommit: Components.Schemas.Commit
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            @frozen package enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case diverged = "diverged"
                case ahead = "ahead"
                case behind = "behind"
                case identical = "identical"
            }
            /// - Remark: Generated from `#/components/schemas/commit-comparison/status`.
            package var status: Components.Schemas.CommitComparison.StatusPayload
            /// - Remark: Generated from `#/components/schemas/commit-comparison/ahead_by`.
            package var aheadBy: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/behind_by`.
            package var behindBy: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/total_commits`.
            package var totalCommits: Swift.Int
            /// - Remark: Generated from `#/components/schemas/commit-comparison/commits`.
            package var commits: [Components.Schemas.Commit]
            /// - Remark: Generated from `#/components/schemas/commit-comparison/files`.
            package var files: [Components.Schemas.DiffEntry]?
            /// Creates a new `CommitComparison`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - htmlUrl:
            ///   - permalinkUrl:
            ///   - diffUrl:
            ///   - patchUrl:
            ///   - baseCommit:
            ///   - mergeBaseCommit:
            ///   - status:
            ///   - aheadBy:
            ///   - behindBy:
            ///   - totalCommits:
            ///   - commits:
            ///   - files:
            package init(
                url: Swift.String,
                htmlUrl: Swift.String,
                permalinkUrl: Swift.String,
                diffUrl: Swift.String,
                patchUrl: Swift.String,
                baseCommit: Components.Schemas.Commit,
                mergeBaseCommit: Components.Schemas.Commit,
                status: Components.Schemas.CommitComparison.StatusPayload,
                aheadBy: Swift.Int,
                behindBy: Swift.Int,
                totalCommits: Swift.Int,
                commits: [Components.Schemas.Commit],
                files: [Components.Schemas.DiffEntry]? = nil
            ) {
                self.url = url
                self.htmlUrl = htmlUrl
                self.permalinkUrl = permalinkUrl
                self.diffUrl = diffUrl
                self.patchUrl = patchUrl
                self.baseCommit = baseCommit
                self.mergeBaseCommit = mergeBaseCommit
                self.status = status
                self.aheadBy = aheadBy
                self.behindBy = behindBy
                self.totalCommits = totalCommits
                self.commits = commits
                self.files = files
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case htmlUrl = "html_url"
                case permalinkUrl = "permalink_url"
                case diffUrl = "diff_url"
                case patchUrl = "patch_url"
                case baseCommit = "base_commit"
                case mergeBaseCommit = "merge_base_commit"
                case status
                case aheadBy = "ahead_by"
                case behindBy = "behind_by"
                case totalCommits = "total_commits"
                case commits
                case files
            }
        }
        /// Contributor
        ///
        /// - Remark: Generated from `#/components/schemas/contributor`.
        package struct Contributor: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/contributor/login`.
            package var login: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/id`.
            package var id: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/contributor/node_id`.
            package var nodeId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/avatar_url`.
            package var avatarUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/url`.
            package var url: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/html_url`.
            package var htmlUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/followers_url`.
            package var followersUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/following_url`.
            package var followingUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/gists_url`.
            package var gistsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/starred_url`.
            package var starredUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/subscriptions_url`.
            package var subscriptionsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/organizations_url`.
            package var organizationsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/repos_url`.
            package var reposUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/events_url`.
            package var eventsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/received_events_url`.
            package var receivedEventsUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/contributor/site_admin`.
            package var siteAdmin: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/contributor/contributions`.
            package var contributions: Swift.Int
            /// - Remark: Generated from `#/components/schemas/contributor/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/contributor/user_view_type`.
            package var userViewType: Swift.String?
            /// Creates a new `Contributor`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - contributions:
            ///   - email:
            ///   - name:
            ///   - userViewType:
            package init(
                login: Swift.String? = nil,
                id: Swift.Int? = nil,
                nodeId: Swift.String? = nil,
                avatarUrl: Swift.String? = nil,
                gravatarId: Swift.String? = nil,
                url: Swift.String? = nil,
                htmlUrl: Swift.String? = nil,
                followersUrl: Swift.String? = nil,
                followingUrl: Swift.String? = nil,
                gistsUrl: Swift.String? = nil,
                starredUrl: Swift.String? = nil,
                subscriptionsUrl: Swift.String? = nil,
                organizationsUrl: Swift.String? = nil,
                reposUrl: Swift.String? = nil,
                eventsUrl: Swift.String? = nil,
                receivedEventsUrl: Swift.String? = nil,
                _type: Swift.String,
                siteAdmin: Swift.Bool? = nil,
                contributions: Swift.Int,
                email: Swift.String? = nil,
                name: Swift.String? = nil,
                userViewType: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.contributions = contributions
                self.email = email
                self.name = name
                self.userViewType = userViewType
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case contributions
                case email
                case name
                case userViewType = "user_view_type"
            }
        }
        /// Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
        ///
        /// - Remark: Generated from `#/components/schemas/label`.
        package struct Label: Codable, Hashable, Sendable {
            /// Unique identifier for the label.
            ///
            /// - Remark: Generated from `#/components/schemas/label/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/label/node_id`.
            package var nodeId: Swift.String
            /// URL for the label
            ///
            /// - Remark: Generated from `#/components/schemas/label/url`.
            package var url: Swift.String
            /// The name of the label.
            ///
            /// - Remark: Generated from `#/components/schemas/label/name`.
            package var name: Swift.String
            /// Optional description of the label, such as its purpose.
            ///
            /// - Remark: Generated from `#/components/schemas/label/description`.
            package var description: Swift.String?
            /// 6-character hex code, without the leading #, identifying the color
            ///
            /// - Remark: Generated from `#/components/schemas/label/color`.
            package var color: Swift.String
            /// Whether this label comes by default in a new repository.
            ///
            /// - Remark: Generated from `#/components/schemas/label/default`.
            package var _default: Swift.Bool
            /// Creates a new `Label`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for the label.
            ///   - nodeId:
            ///   - url: URL for the label
            ///   - name: The name of the label.
            ///   - description: Optional description of the label, such as its purpose.
            ///   - color: 6-character hex code, without the leading #, identifying the color
            ///   - _default: Whether this label comes by default in a new repository.
            package init(
                id: Swift.Int64,
                nodeId: Swift.String,
                url: Swift.String,
                name: Swift.String,
                description: Swift.String? = nil,
                color: Swift.String,
                _default: Swift.Bool
            ) {
                self.id = id
                self.nodeId = nodeId
                self.url = url
                self.name = name
                self.description = description
                self.color = color
                self._default = _default
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case url
                case name
                case description
                case color
                case _default = "default"
            }
        }
        /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request`.
        package struct PullRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/pull-request/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/diff_url`.
            package var diffUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/patch_url`.
            package var patchUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/issue_url`.
            package var issueUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/commits_url`.
            package var commitsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments_url`.
            package var reviewCommentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comment_url`.
            package var reviewCommentUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/comments_url`.
            package var commentsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/statuses_url`.
            package var statusesUrl: Swift.String
            /// Number uniquely identifying the pull request within its repository.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/number`.
            package var number: Swift.Int
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case open = "open"
                case closed = "closed"
            }
            /// State of this Pull Request. Either `open` or `closed`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/state`.
            package var state: Components.Schemas.PullRequest.StatePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/locked`.
            package var locked: Swift.Bool
            /// The title of the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/title`.
            package var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request/user`.
            package var user: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/pull-request/body`.
            package var body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload`.
            package struct LabelsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/id`.
                package var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/node_id`.
                package var nodeId: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/url`.
                package var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/description`.
                package var description: Swift.String?
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/color`.
                package var color: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/LabelsPayload/default`.
                package var _default: Swift.Bool
                /// Creates a new `LabelsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - nodeId:
                ///   - url:
                ///   - name:
                ///   - description:
                ///   - color:
                ///   - _default:
                package init(
                    id: Swift.Int64,
                    nodeId: Swift.String,
                    url: Swift.String,
                    name: Swift.String,
                    description: Swift.String? = nil,
                    color: Swift.String,
                    _default: Swift.Bool
                ) {
                    self.id = id
                    self.nodeId = nodeId
                    self.url = url
                    self.name = name
                    self.description = description
                    self.color = color
                    self._default = _default
                }
                package enum CodingKeys: String, CodingKey {
                    case id
                    case nodeId = "node_id"
                    case url
                    case name
                    case description
                    case color
                    case _default = "default"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            package typealias LabelsPayload = [Components.Schemas.PullRequest.LabelsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/pull-request/labels`.
            package var labels: Components.Schemas.PullRequest.LabelsPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/milestone`.
            package var milestone: Components.Schemas.NullableMilestone?
            /// - Remark: Generated from `#/components/schemas/pull-request/active_lock_reason`.
            package var activeLockReason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/pull-request/closed_at`.
            package var closedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_at`.
            package var mergedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/pull-request/merge_commit_sha`.
            package var mergeCommitSha: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignee`.
            package var assignee: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request/assignees`.
            package var assignees: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_reviewers`.
            package var requestedReviewers: [Components.Schemas.SimpleUser]?
            /// - Remark: Generated from `#/components/schemas/pull-request/requested_teams`.
            package var requestedTeams: [Components.Schemas.TeamSimple]?
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            package struct HeadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/head/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/repo`.
                package var repo: Components.Schemas.Repository?
                /// - Remark: Generated from `#/components/schemas/pull-request/head/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/head/user`.
                package var user: Components.Schemas.SimpleUser
                /// Creates a new `HeadPayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.Repository? = nil,
                    sha: Swift.String,
                    user: Components.Schemas.SimpleUser
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/head`.
            package var head: Components.Schemas.PullRequest.HeadPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            package struct BasePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/base/label`.
                package var label: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/ref`.
                package var ref: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/repo`.
                package var repo: Components.Schemas.Repository
                /// - Remark: Generated from `#/components/schemas/pull-request/base/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/pull-request/base/user`.
                package var user: Components.Schemas.SimpleUser
                /// Creates a new `BasePayload`.
                ///
                /// - Parameters:
                ///   - label:
                ///   - ref:
                ///   - repo:
                ///   - sha:
                ///   - user:
                package init(
                    label: Swift.String,
                    ref: Swift.String,
                    repo: Components.Schemas.Repository,
                    sha: Swift.String,
                    user: Components.Schemas.SimpleUser
                ) {
                    self.label = label
                    self.ref = ref
                    self.repo = repo
                    self.sha = sha
                    self.user = user
                }
                package enum CodingKeys: String, CodingKey {
                    case label
                    case ref
                    case repo
                    case sha
                    case user
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/base`.
            package var base: Components.Schemas.PullRequest.BasePayload
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/comments`.
                package var comments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/commits`.
                package var commits: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/statuses`.
                package var statuses: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/html`.
                package var html: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/issue`.
                package var issue: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comments`.
                package var reviewComments: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/review_comment`.
                package var reviewComment: Components.Schemas.Link
                /// - Remark: Generated from `#/components/schemas/pull-request/_links/self`.
                package var _self: Components.Schemas.Link
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - comments:
                ///   - commits:
                ///   - statuses:
                ///   - html:
                ///   - issue:
                ///   - reviewComments:
                ///   - reviewComment:
                ///   - _self:
                package init(
                    comments: Components.Schemas.Link,
                    commits: Components.Schemas.Link,
                    statuses: Components.Schemas.Link,
                    html: Components.Schemas.Link,
                    issue: Components.Schemas.Link,
                    reviewComments: Components.Schemas.Link,
                    reviewComment: Components.Schemas.Link,
                    _self: Components.Schemas.Link
                ) {
                    self.comments = comments
                    self.commits = commits
                    self.statuses = statuses
                    self.html = html
                    self.issue = issue
                    self.reviewComments = reviewComments
                    self.reviewComment = reviewComment
                    self._self = _self
                }
                package enum CodingKeys: String, CodingKey {
                    case comments
                    case commits
                    case statuses
                    case html
                    case issue
                    case reviewComments = "review_comments"
                    case reviewComment = "review_comment"
                    case _self = "self"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request/_links`.
            package var _links: Components.Schemas.PullRequest._LinksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// - Remark: Generated from `#/components/schemas/pull-request/auto_merge`.
            package var autoMerge: Components.Schemas.AutoMerge?
            /// Indicates whether or not the pull request is a draft.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/draft`.
            package var draft: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged`.
            package var merged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable`.
            package var mergeable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/rebaseable`.
            package var rebaseable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/mergeable_state`.
            package var mergeableState: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request/merged_by`.
            package var mergedBy: Components.Schemas.NullableSimpleUser?
            /// - Remark: Generated from `#/components/schemas/pull-request/comments`.
            package var comments: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/review_comments`.
            package var reviewComments: Swift.Int?
            /// Indicates whether maintainers can modify the pull request.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request/maintainer_can_modify`.
            package var maintainerCanModify: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/pull-request/commits`.
            package var commits: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/additions`.
            package var additions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/deletions`.
            package var deletions: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/pull-request/changed_files`.
            package var changedFiles: Swift.Int?
            /// Creates a new `PullRequest`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - id:
            ///   - nodeId:
            ///   - htmlUrl:
            ///   - diffUrl:
            ///   - patchUrl:
            ///   - issueUrl:
            ///   - commitsUrl:
            ///   - reviewCommentsUrl:
            ///   - reviewCommentUrl:
            ///   - commentsUrl:
            ///   - statusesUrl:
            ///   - number: Number uniquely identifying the pull request within its repository.
            ///   - state: State of this Pull Request. Either `open` or `closed`.
            ///   - locked:
            ///   - title: The title of the pull request.
            ///   - user:
            ///   - body:
            ///   - labels:
            ///   - milestone:
            ///   - activeLockReason:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - closedAt:
            ///   - mergedAt:
            ///   - mergeCommitSha:
            ///   - assignee:
            ///   - assignees:
            ///   - requestedReviewers:
            ///   - requestedTeams:
            ///   - head:
            ///   - base:
            ///   - _links:
            ///   - authorAssociation:
            ///   - autoMerge:
            ///   - draft: Indicates whether or not the pull request is a draft.
            ///   - merged:
            ///   - mergeable:
            ///   - rebaseable:
            ///   - mergeableState:
            ///   - mergedBy:
            ///   - comments:
            ///   - reviewComments:
            ///   - maintainerCanModify: Indicates whether maintainers can modify the pull request.
            ///   - commits:
            ///   - additions:
            ///   - deletions:
            ///   - changedFiles:
            package init(
                url: Swift.String,
                id: Swift.Int64,
                nodeId: Swift.String,
                htmlUrl: Swift.String,
                diffUrl: Swift.String,
                patchUrl: Swift.String,
                issueUrl: Swift.String,
                commitsUrl: Swift.String,
                reviewCommentsUrl: Swift.String,
                reviewCommentUrl: Swift.String,
                commentsUrl: Swift.String,
                statusesUrl: Swift.String,
                number: Swift.Int,
                state: Components.Schemas.PullRequest.StatePayload,
                locked: Swift.Bool,
                title: Swift.String,
                user: Components.Schemas.SimpleUser,
                body: Swift.String? = nil,
                labels: Components.Schemas.PullRequest.LabelsPayload,
                milestone: Components.Schemas.NullableMilestone? = nil,
                activeLockReason: Swift.String? = nil,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                closedAt: Foundation.Date? = nil,
                mergedAt: Foundation.Date? = nil,
                mergeCommitSha: Swift.String? = nil,
                assignee: Components.Schemas.NullableSimpleUser? = nil,
                assignees: [Components.Schemas.SimpleUser]? = nil,
                requestedReviewers: [Components.Schemas.SimpleUser]? = nil,
                requestedTeams: [Components.Schemas.TeamSimple]? = nil,
                head: Components.Schemas.PullRequest.HeadPayload,
                base: Components.Schemas.PullRequest.BasePayload,
                _links: Components.Schemas.PullRequest._LinksPayload,
                authorAssociation: Components.Schemas.AuthorAssociation,
                autoMerge: Components.Schemas.AutoMerge? = nil,
                draft: Swift.Bool? = nil,
                merged: Swift.Bool? = nil,
                mergeable: Swift.Bool? = nil,
                rebaseable: Swift.Bool? = nil,
                mergeableState: Swift.String? = nil,
                mergedBy: Components.Schemas.NullableSimpleUser? = nil,
                comments: Swift.Int? = nil,
                reviewComments: Swift.Int? = nil,
                maintainerCanModify: Swift.Bool? = nil,
                commits: Swift.Int? = nil,
                additions: Swift.Int? = nil,
                deletions: Swift.Int? = nil,
                changedFiles: Swift.Int? = nil
            ) {
                self.url = url
                self.id = id
                self.nodeId = nodeId
                self.htmlUrl = htmlUrl
                self.diffUrl = diffUrl
                self.patchUrl = patchUrl
                self.issueUrl = issueUrl
                self.commitsUrl = commitsUrl
                self.reviewCommentsUrl = reviewCommentsUrl
                self.reviewCommentUrl = reviewCommentUrl
                self.commentsUrl = commentsUrl
                self.statusesUrl = statusesUrl
                self.number = number
                self.state = state
                self.locked = locked
                self.title = title
                self.user = user
                self.body = body
                self.labels = labels
                self.milestone = milestone
                self.activeLockReason = activeLockReason
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.closedAt = closedAt
                self.mergedAt = mergedAt
                self.mergeCommitSha = mergeCommitSha
                self.assignee = assignee
                self.assignees = assignees
                self.requestedReviewers = requestedReviewers
                self.requestedTeams = requestedTeams
                self.head = head
                self.base = base
                self._links = _links
                self.authorAssociation = authorAssociation
                self.autoMerge = autoMerge
                self.draft = draft
                self.merged = merged
                self.mergeable = mergeable
                self.rebaseable = rebaseable
                self.mergeableState = mergeableState
                self.mergedBy = mergedBy
                self.comments = comments
                self.reviewComments = reviewComments
                self.maintainerCanModify = maintainerCanModify
                self.commits = commits
                self.additions = additions
                self.deletions = deletions
                self.changedFiles = changedFiles
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case id
                case nodeId = "node_id"
                case htmlUrl = "html_url"
                case diffUrl = "diff_url"
                case patchUrl = "patch_url"
                case issueUrl = "issue_url"
                case commitsUrl = "commits_url"
                case reviewCommentsUrl = "review_comments_url"
                case reviewCommentUrl = "review_comment_url"
                case commentsUrl = "comments_url"
                case statusesUrl = "statuses_url"
                case number
                case state
                case locked
                case title
                case user
                case body
                case labels
                case milestone
                case activeLockReason = "active_lock_reason"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case closedAt = "closed_at"
                case mergedAt = "merged_at"
                case mergeCommitSha = "merge_commit_sha"
                case assignee
                case assignees
                case requestedReviewers = "requested_reviewers"
                case requestedTeams = "requested_teams"
                case head
                case base
                case _links
                case authorAssociation = "author_association"
                case autoMerge = "auto_merge"
                case draft
                case merged
                case mergeable
                case rebaseable
                case mergeableState = "mergeable_state"
                case mergedBy = "merged_by"
                case comments
                case reviewComments = "review_comments"
                case maintainerCanModify = "maintainer_can_modify"
                case commits
                case additions
                case deletions
                case changedFiles = "changed_files"
            }
        }
        /// Pull Request Reviews are reviews on pull requests.
        ///
        /// - Remark: Generated from `#/components/schemas/pull-request-review`.
        package struct PullRequestReview: Codable, Hashable, Sendable {
            /// Unique identifier of the review
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/pull-request-review/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/user`.
            package var user: Components.Schemas.NullableSimpleUser?
            /// The text of the review.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body`.
            package var body: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/state`.
            package var state: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/pull_request_url`.
            package var pullRequestUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/pull-request-review/_links`.
            package struct _LinksPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html`.
                package struct HtmlPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html/href`.
                    package var href: Swift.String
                    /// Creates a new `HtmlPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/html`.
                package var html: Components.Schemas.PullRequestReview._LinksPayload.HtmlPayload
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request`.
                package struct PullRequestPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request/href`.
                    package var href: Swift.String
                    /// Creates a new `PullRequestPayload`.
                    ///
                    /// - Parameters:
                    ///   - href:
                    package init(href: Swift.String) {
                        self.href = href
                    }
                    package enum CodingKeys: String, CodingKey {
                        case href
                    }
                }
                /// - Remark: Generated from `#/components/schemas/pull-request-review/_links/pull_request`.
                package var pullRequest: Components.Schemas.PullRequestReview._LinksPayload.PullRequestPayload
                /// Creates a new `_LinksPayload`.
                ///
                /// - Parameters:
                ///   - html:
                ///   - pullRequest:
                package init(
                    html: Components.Schemas.PullRequestReview._LinksPayload.HtmlPayload,
                    pullRequest: Components.Schemas.PullRequestReview._LinksPayload.PullRequestPayload
                ) {
                    self.html = html
                    self.pullRequest = pullRequest
                }
                package enum CodingKeys: String, CodingKey {
                    case html
                    case pullRequest = "pull_request"
                }
            }
            /// - Remark: Generated from `#/components/schemas/pull-request-review/_links`.
            package var _links: Components.Schemas.PullRequestReview._LinksPayload
            /// - Remark: Generated from `#/components/schemas/pull-request-review/submitted_at`.
            package var submittedAt: Foundation.Date?
            /// A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
            ///
            /// - Remark: Generated from `#/components/schemas/pull-request-review/commit_id`.
            package var commitId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/pull-request-review/author_association`.
            package var authorAssociation: Components.Schemas.AuthorAssociation
            /// Creates a new `PullRequestReview`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the review
            ///   - nodeId:
            ///   - user:
            ///   - body: The text of the review.
            ///   - state:
            ///   - htmlUrl:
            ///   - pullRequestUrl:
            ///   - _links:
            ///   - submittedAt:
            ///   - commitId: A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
            ///   - bodyHtml:
            ///   - bodyText:
            ///   - authorAssociation:
            package init(
                id: Swift.Int64,
                nodeId: Swift.String,
                user: Components.Schemas.NullableSimpleUser? = nil,
                body: Swift.String,
                state: Swift.String,
                htmlUrl: Swift.String,
                pullRequestUrl: Swift.String,
                _links: Components.Schemas.PullRequestReview._LinksPayload,
                submittedAt: Foundation.Date? = nil,
                commitId: Swift.String? = nil,
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                authorAssociation: Components.Schemas.AuthorAssociation
            ) {
                self.id = id
                self.nodeId = nodeId
                self.user = user
                self.body = body
                self.state = state
                self.htmlUrl = htmlUrl
                self.pullRequestUrl = pullRequestUrl
                self._links = _links
                self.submittedAt = submittedAt
                self.commitId = commitId
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
                self.authorAssociation = authorAssociation
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
                case user
                case body
                case state
                case htmlUrl = "html_url"
                case pullRequestUrl = "pull_request_url"
                case _links
                case submittedAt = "submitted_at"
                case commitId = "commit_id"
                case bodyHtml = "body_html"
                case bodyText = "body_text"
                case authorAssociation = "author_association"
            }
        }
        /// Data related to a release.
        ///
        /// - Remark: Generated from `#/components/schemas/release-asset`.
        package struct ReleaseAsset: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release-asset/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/browser_download_url`.
            package var browserDownloadUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/node_id`.
            package var nodeId: Swift.String
            /// The file name of the asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/label`.
            package var label: Swift.String?
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case uploaded = "uploaded"
                case open = "open"
            }
            /// State of the release asset.
            ///
            /// - Remark: Generated from `#/components/schemas/release-asset/state`.
            package var state: Components.Schemas.ReleaseAsset.StatePayload
            /// - Remark: Generated from `#/components/schemas/release-asset/content_type`.
            package var contentType: Swift.String
            /// - Remark: Generated from `#/components/schemas/release-asset/size`.
            package var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/download_count`.
            package var downloadCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release-asset/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release-asset/uploader`.
            package var uploader: Components.Schemas.NullableSimpleUser?
            /// Creates a new `ReleaseAsset`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - browserDownloadUrl:
            ///   - id:
            ///   - nodeId:
            ///   - name: The file name of the asset.
            ///   - label:
            ///   - state: State of the release asset.
            ///   - contentType:
            ///   - size:
            ///   - downloadCount:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - uploader:
            package init(
                url: Swift.String,
                browserDownloadUrl: Swift.String,
                id: Swift.Int,
                nodeId: Swift.String,
                name: Swift.String,
                label: Swift.String? = nil,
                state: Components.Schemas.ReleaseAsset.StatePayload,
                contentType: Swift.String,
                size: Swift.Int,
                downloadCount: Swift.Int,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                uploader: Components.Schemas.NullableSimpleUser? = nil
            ) {
                self.url = url
                self.browserDownloadUrl = browserDownloadUrl
                self.id = id
                self.nodeId = nodeId
                self.name = name
                self.label = label
                self.state = state
                self.contentType = contentType
                self.size = size
                self.downloadCount = downloadCount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.uploader = uploader
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case browserDownloadUrl = "browser_download_url"
                case id
                case nodeId = "node_id"
                case name
                case label
                case state
                case contentType = "content_type"
                case size
                case downloadCount = "download_count"
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case uploader
            }
        }
        /// A release.
        ///
        /// - Remark: Generated from `#/components/schemas/release`.
        package struct Release: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/release/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/assets_url`.
            package var assetsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/upload_url`.
            package var uploadUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/tarball_url`.
            package var tarballUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/zipball_url`.
            package var zipballUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/id`.
            package var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/release/node_id`.
            package var nodeId: Swift.String
            /// The name of the tag.
            ///
            /// - Remark: Generated from `#/components/schemas/release/tag_name`.
            package var tagName: Swift.String
            /// Specifies the commitish value that determines where the Git tag is created from.
            ///
            /// - Remark: Generated from `#/components/schemas/release/target_commitish`.
            package var targetCommitish: Swift.String
            /// - Remark: Generated from `#/components/schemas/release/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body`.
            package var body: Swift.String?
            /// true to create a draft (unpublished) release, false to create a published one.
            ///
            /// - Remark: Generated from `#/components/schemas/release/draft`.
            package var draft: Swift.Bool
            /// Whether to identify the release as a prerelease or a full release.
            ///
            /// - Remark: Generated from `#/components/schemas/release/prerelease`.
            package var prerelease: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/release/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/release/published_at`.
            package var publishedAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/release/author`.
            package var author: Components.Schemas.SimpleUser
            /// - Remark: Generated from `#/components/schemas/release/assets`.
            package var assets: [Components.Schemas.ReleaseAsset]
            /// - Remark: Generated from `#/components/schemas/release/body_html`.
            package var bodyHtml: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/body_text`.
            package var bodyText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/mentions_count`.
            package var mentionsCount: Swift.Int?
            /// The URL of the release discussion.
            ///
            /// - Remark: Generated from `#/components/schemas/release/discussion_url`.
            package var discussionUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/release/reactions`.
            package var reactions: Components.Schemas.ReactionRollup?
            /// Creates a new `Release`.
            ///
            /// - Parameters:
            ///   - url:
            ///   - htmlUrl:
            ///   - assetsUrl:
            ///   - uploadUrl:
            ///   - tarballUrl:
            ///   - zipballUrl:
            ///   - id:
            ///   - nodeId:
            ///   - tagName: The name of the tag.
            ///   - targetCommitish: Specifies the commitish value that determines where the Git tag is created from.
            ///   - name:
            ///   - body:
            ///   - draft: true to create a draft (unpublished) release, false to create a published one.
            ///   - prerelease: Whether to identify the release as a prerelease or a full release.
            ///   - createdAt:
            ///   - publishedAt:
            ///   - author:
            ///   - assets:
            ///   - bodyHtml:
            ///   - bodyText:
            ///   - mentionsCount:
            ///   - discussionUrl: The URL of the release discussion.
            ///   - reactions:
            package init(
                url: Swift.String,
                htmlUrl: Swift.String,
                assetsUrl: Swift.String,
                uploadUrl: Swift.String,
                tarballUrl: Swift.String? = nil,
                zipballUrl: Swift.String? = nil,
                id: Swift.Int,
                nodeId: Swift.String,
                tagName: Swift.String,
                targetCommitish: Swift.String,
                name: Swift.String? = nil,
                body: Swift.String? = nil,
                draft: Swift.Bool,
                prerelease: Swift.Bool,
                createdAt: Foundation.Date,
                publishedAt: Foundation.Date? = nil,
                author: Components.Schemas.SimpleUser,
                assets: [Components.Schemas.ReleaseAsset],
                bodyHtml: Swift.String? = nil,
                bodyText: Swift.String? = nil,
                mentionsCount: Swift.Int? = nil,
                discussionUrl: Swift.String? = nil,
                reactions: Components.Schemas.ReactionRollup? = nil
            ) {
                self.url = url
                self.htmlUrl = htmlUrl
                self.assetsUrl = assetsUrl
                self.uploadUrl = uploadUrl
                self.tarballUrl = tarballUrl
                self.zipballUrl = zipballUrl
                self.id = id
                self.nodeId = nodeId
                self.tagName = tagName
                self.targetCommitish = targetCommitish
                self.name = name
                self.body = body
                self.draft = draft
                self.prerelease = prerelease
                self.createdAt = createdAt
                self.publishedAt = publishedAt
                self.author = author
                self.assets = assets
                self.bodyHtml = bodyHtml
                self.bodyText = bodyText
                self.mentionsCount = mentionsCount
                self.discussionUrl = discussionUrl
                self.reactions = reactions
            }
            package enum CodingKeys: String, CodingKey {
                case url
                case htmlUrl = "html_url"
                case assetsUrl = "assets_url"
                case uploadUrl = "upload_url"
                case tarballUrl = "tarball_url"
                case zipballUrl = "zipball_url"
                case id
                case nodeId = "node_id"
                case tagName = "tag_name"
                case targetCommitish = "target_commitish"
                case name
                case body
                case draft
                case prerelease
                case createdAt = "created_at"
                case publishedAt = "published_at"
                case author
                case assets
                case bodyHtml = "body_html"
                case bodyText = "body_text"
                case mentionsCount = "mentions_count"
                case discussionUrl = "discussion_url"
                case reactions
            }
        }
        /// Tag
        ///
        /// - Remark: Generated from `#/components/schemas/tag`.
        package struct Tag: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/tag/name`.
            package var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            package struct CommitPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/tag/commit/sha`.
                package var sha: Swift.String
                /// - Remark: Generated from `#/components/schemas/tag/commit/url`.
                package var url: Swift.String
                /// Creates a new `CommitPayload`.
                ///
                /// - Parameters:
                ///   - sha:
                ///   - url:
                package init(
                    sha: Swift.String,
                    url: Swift.String
                ) {
                    self.sha = sha
                    self.url = url
                }
                package enum CodingKeys: String, CodingKey {
                    case sha
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/tag/commit`.
            package var commit: Components.Schemas.Tag.CommitPayload
            /// - Remark: Generated from `#/components/schemas/tag/zipball_url`.
            package var zipballUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/tarball_url`.
            package var tarballUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/tag/node_id`.
            package var nodeId: Swift.String
            /// Creates a new `Tag`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - commit:
            ///   - zipballUrl:
            ///   - tarballUrl:
            ///   - nodeId:
            package init(
                name: Swift.String,
                commit: Components.Schemas.Tag.CommitPayload,
                zipballUrl: Swift.String,
                tarballUrl: Swift.String,
                nodeId: Swift.String
            ) {
                self.name = name
                self.commit = commit
                self.zipballUrl = zipballUrl
                self.tarballUrl = tarballUrl
                self.nodeId = nodeId
            }
            package enum CodingKeys: String, CodingKey {
                case name
                case commit
                case zipballUrl = "zipball_url"
                case tarballUrl = "tarball_url"
                case nodeId = "node_id"
            }
        }
        /// Private User
        ///
        /// - Remark: Generated from `#/components/schemas/private-user`.
        package struct PrivateUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/private-user/login`.
            package var login: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/id`.
            package var id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/private-user/user_view_type`.
            package var userViewType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/node_id`.
            package var nodeId: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/avatar_url`.
            package var avatarUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/gravatar_id`.
            package var gravatarId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/url`.
            package var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/html_url`.
            package var htmlUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/followers_url`.
            package var followersUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/following_url`.
            package var followingUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/gists_url`.
            package var gistsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/starred_url`.
            package var starredUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/subscriptions_url`.
            package var subscriptionsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/organizations_url`.
            package var organizationsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/repos_url`.
            package var reposUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/events_url`.
            package var eventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/received_events_url`.
            package var receivedEventsUrl: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/type`.
            package var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/private-user/site_admin`.
            package var siteAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/private-user/name`.
            package var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/company`.
            package var company: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/blog`.
            package var blog: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/location`.
            package var location: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/email`.
            package var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/notification_email`.
            package var notificationEmail: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/hireable`.
            package var hireable: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/private-user/bio`.
            package var bio: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/twitter_username`.
            package var twitterUsername: Swift.String?
            /// - Remark: Generated from `#/components/schemas/private-user/public_repos`.
            package var publicRepos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/public_gists`.
            package var publicGists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/followers`.
            package var followers: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/following`.
            package var following: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/created_at`.
            package var createdAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/private-user/updated_at`.
            package var updatedAt: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/private-user/private_gists`.
            package var privateGists: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/total_private_repos`.
            package var totalPrivateRepos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/owned_private_repos`.
            package var ownedPrivateRepos: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/disk_usage`.
            package var diskUsage: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/collaborators`.
            package var collaborators: Swift.Int
            /// - Remark: Generated from `#/components/schemas/private-user/two_factor_authentication`.
            package var twoFactorAuthentication: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/private-user/plan`.
            package struct PlanPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/private-user/plan/collaborators`.
                package var collaborators: Swift.Int
                /// - Remark: Generated from `#/components/schemas/private-user/plan/name`.
                package var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/private-user/plan/space`.
                package var space: Swift.Int
                /// - Remark: Generated from `#/components/schemas/private-user/plan/private_repos`.
                package var privateRepos: Swift.Int
                /// Creates a new `PlanPayload`.
                ///
                /// - Parameters:
                ///   - collaborators:
                ///   - name:
                ///   - space:
                ///   - privateRepos:
                package init(
                    collaborators: Swift.Int,
                    name: Swift.String,
                    space: Swift.Int,
                    privateRepos: Swift.Int
                ) {
                    self.collaborators = collaborators
                    self.name = name
                    self.space = space
                    self.privateRepos = privateRepos
                }
                package enum CodingKeys: String, CodingKey {
                    case collaborators
                    case name
                    case space
                    case privateRepos = "private_repos"
                }
            }
            /// - Remark: Generated from `#/components/schemas/private-user/plan`.
            package var plan: Components.Schemas.PrivateUser.PlanPayload?
            /// - Remark: Generated from `#/components/schemas/private-user/business_plus`.
            package var businessPlus: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/private-user/ldap_dn`.
            package var ldapDn: Swift.String?
            /// Creates a new `PrivateUser`.
            ///
            /// - Parameters:
            ///   - login:
            ///   - id:
            ///   - userViewType:
            ///   - nodeId:
            ///   - avatarUrl:
            ///   - gravatarId:
            ///   - url:
            ///   - htmlUrl:
            ///   - followersUrl:
            ///   - followingUrl:
            ///   - gistsUrl:
            ///   - starredUrl:
            ///   - subscriptionsUrl:
            ///   - organizationsUrl:
            ///   - reposUrl:
            ///   - eventsUrl:
            ///   - receivedEventsUrl:
            ///   - _type:
            ///   - siteAdmin:
            ///   - name:
            ///   - company:
            ///   - blog:
            ///   - location:
            ///   - email:
            ///   - notificationEmail:
            ///   - hireable:
            ///   - bio:
            ///   - twitterUsername:
            ///   - publicRepos:
            ///   - publicGists:
            ///   - followers:
            ///   - following:
            ///   - createdAt:
            ///   - updatedAt:
            ///   - privateGists:
            ///   - totalPrivateRepos:
            ///   - ownedPrivateRepos:
            ///   - diskUsage:
            ///   - collaborators:
            ///   - twoFactorAuthentication:
            ///   - plan:
            ///   - businessPlus:
            ///   - ldapDn:
            package init(
                login: Swift.String,
                id: Swift.Int64,
                userViewType: Swift.String? = nil,
                nodeId: Swift.String,
                avatarUrl: Swift.String,
                gravatarId: Swift.String? = nil,
                url: Swift.String,
                htmlUrl: Swift.String,
                followersUrl: Swift.String,
                followingUrl: Swift.String,
                gistsUrl: Swift.String,
                starredUrl: Swift.String,
                subscriptionsUrl: Swift.String,
                organizationsUrl: Swift.String,
                reposUrl: Swift.String,
                eventsUrl: Swift.String,
                receivedEventsUrl: Swift.String,
                _type: Swift.String,
                siteAdmin: Swift.Bool,
                name: Swift.String? = nil,
                company: Swift.String? = nil,
                blog: Swift.String? = nil,
                location: Swift.String? = nil,
                email: Swift.String? = nil,
                notificationEmail: Swift.String? = nil,
                hireable: Swift.Bool? = nil,
                bio: Swift.String? = nil,
                twitterUsername: Swift.String? = nil,
                publicRepos: Swift.Int,
                publicGists: Swift.Int,
                followers: Swift.Int,
                following: Swift.Int,
                createdAt: Foundation.Date,
                updatedAt: Foundation.Date,
                privateGists: Swift.Int,
                totalPrivateRepos: Swift.Int,
                ownedPrivateRepos: Swift.Int,
                diskUsage: Swift.Int,
                collaborators: Swift.Int,
                twoFactorAuthentication: Swift.Bool,
                plan: Components.Schemas.PrivateUser.PlanPayload? = nil,
                businessPlus: Swift.Bool? = nil,
                ldapDn: Swift.String? = nil
            ) {
                self.login = login
                self.id = id
                self.userViewType = userViewType
                self.nodeId = nodeId
                self.avatarUrl = avatarUrl
                self.gravatarId = gravatarId
                self.url = url
                self.htmlUrl = htmlUrl
                self.followersUrl = followersUrl
                self.followingUrl = followingUrl
                self.gistsUrl = gistsUrl
                self.starredUrl = starredUrl
                self.subscriptionsUrl = subscriptionsUrl
                self.organizationsUrl = organizationsUrl
                self.reposUrl = reposUrl
                self.eventsUrl = eventsUrl
                self.receivedEventsUrl = receivedEventsUrl
                self._type = _type
                self.siteAdmin = siteAdmin
                self.name = name
                self.company = company
                self.blog = blog
                self.location = location
                self.email = email
                self.notificationEmail = notificationEmail
                self.hireable = hireable
                self.bio = bio
                self.twitterUsername = twitterUsername
                self.publicRepos = publicRepos
                self.publicGists = publicGists
                self.followers = followers
                self.following = following
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.privateGists = privateGists
                self.totalPrivateRepos = totalPrivateRepos
                self.ownedPrivateRepos = ownedPrivateRepos
                self.diskUsage = diskUsage
                self.collaborators = collaborators
                self.twoFactorAuthentication = twoFactorAuthentication
                self.plan = plan
                self.businessPlus = businessPlus
                self.ldapDn = ldapDn
            }
            package enum CodingKeys: String, CodingKey {
                case login
                case id
                case userViewType = "user_view_type"
                case nodeId = "node_id"
                case avatarUrl = "avatar_url"
                case gravatarId = "gravatar_id"
                case url
                case htmlUrl = "html_url"
                case followersUrl = "followers_url"
                case followingUrl = "following_url"
                case gistsUrl = "gists_url"
                case starredUrl = "starred_url"
                case subscriptionsUrl = "subscriptions_url"
                case organizationsUrl = "organizations_url"
                case reposUrl = "repos_url"
                case eventsUrl = "events_url"
                case receivedEventsUrl = "received_events_url"
                case _type = "type"
                case siteAdmin = "site_admin"
                case name
                case company
                case blog
                case location
                case email
                case notificationEmail = "notification_email"
                case hireable
                case bio
                case twitterUsername = "twitter_username"
                case publicRepos = "public_repos"
                case publicGists = "public_gists"
                case followers
                case following
                case createdAt = "created_at"
                case updatedAt = "updated_at"
                case privateGists = "private_gists"
                case totalPrivateRepos = "total_private_repos"
                case ownedPrivateRepos = "owned_private_repos"
                case diskUsage = "disk_usage"
                case collaborators
                case twoFactorAuthentication = "two_factor_authentication"
                case plan
                case businessPlus = "business_plus"
                case ldapDn = "ldap_dn"
            }
        }
        /// The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
        /// for and sent to a GitHub App. For more information,
        /// see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
        ///
        /// - Remark: Generated from `#/components/schemas/simple-installation`.
        package struct SimpleInstallation: Codable, Hashable, Sendable {
            /// The ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/id`.
            package var id: Swift.Int
            /// The global node ID of the installation.
            ///
            /// - Remark: Generated from `#/components/schemas/simple-installation/node_id`.
            package var nodeId: Swift.String?
            /// Creates a new `SimpleInstallation`.
            ///
            /// - Parameters:
            ///   - id: The ID of the installation.
            ///   - nodeId: The global node ID of the installation.
            package init(
                id: Swift.Int,
                nodeId: Swift.String? = nil
            ) {
                self.id = id
                self.nodeId = nodeId
            }
            package enum CodingKeys: String, CodingKey {
                case id
                case nodeId = "node_id"
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    package enum Parameters {
        /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/per-page`.
        package typealias PerPage = Swift.Int
        /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        package typealias Page = Swift.Int
        /// The unique identifier of the installation.
        ///
        /// - Remark: Generated from `#/components/parameters/installation-id`.
        package typealias InstallationId = Swift.Int
        /// The account owner of the repository. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/owner`.
        package typealias Owner = Swift.String
        /// The name of the repository without the `.git` extension. The name is not case sensitive.
        ///
        /// - Remark: Generated from `#/components/parameters/repo`.
        package typealias Repo = Swift.String
        /// The handle for the GitHub user account.
        ///
        /// - Remark: Generated from `#/components/parameters/username`.
        package typealias Username = Swift.String
        /// The unique identifier of the card.
        ///
        /// - Remark: Generated from `#/components/parameters/card-id`.
        package typealias CardId = Swift.Int
        /// The unique identifier of the column.
        ///
        /// - Remark: Generated from `#/components/parameters/column-id`.
        package typealias ColumnId = Swift.Int
        /// The SHA of the commit.
        ///
        /// - Remark: Generated from `#/components/parameters/commit-sha`.
        package typealias CommitSha = Swift.String
        /// The number that identifies the issue.
        ///
        /// - Remark: Generated from `#/components/parameters/issue-number`.
        package typealias IssueNumber = Swift.Int
        /// The number that identifies the pull request.
        ///
        /// - Remark: Generated from `#/components/parameters/pull-number`.
        package typealias PullNumber = Swift.Int
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    package enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    package enum Responses {
        package struct NotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/not_found/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/not_found/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.NotFound.Body
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.NotFound.Body) {
                self.body = body
            }
        }
        package struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/bad_request/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/bad_request/content/application\/scim+json`.
                case applicationScimJson(Components.Schemas.ScimError)
                /// The associated value of the enum case if `self` is `.applicationScimJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationScimJson`.
                /// - SeeAlso: `.applicationScimJson`.
                package var applicationScimJson: Components.Schemas.ScimError {
                    get throws {
                        switch self {
                        case let .applicationScimJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/scim+json",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.BadRequest.Body) {
                self.body = body
            }
        }
        package struct ValidationFailed: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/validation_failed/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/validation_failed/content/application\/json`.
                case json(Components.Schemas.ValidationError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.ValidationError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ValidationFailed.Body
            /// Creates a new `ValidationFailed`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ValidationFailed.Body) {
                self.body = body
            }
        }
        package struct NotModified: Sendable, Hashable {
            /// Creates a new `NotModified`.
            package init() {}
        }
        package struct RequiresAuthentication: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/requires_authentication/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/requires_authentication/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.RequiresAuthentication.Body
            /// Creates a new `RequiresAuthentication`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.RequiresAuthentication.Body) {
                self.body = body
            }
        }
        package struct Forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/forbidden/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/forbidden/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Forbidden.Body
            /// Creates a new `Forbidden`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Forbidden.Body) {
                self.body = body
            }
        }
        package struct Conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/conflict/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/conflict/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Conflict.Body
            /// Creates a new `Conflict`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Conflict.Body) {
                self.body = body
            }
        }
        package struct ServiceUnavailable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/service_unavailable/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/code`.
                    package var code: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/message`.
                    package var message: Swift.String?
                    /// - Remark: Generated from `#/components/responses/service_unavailable/content/json/documentation_url`.
                    package var documentationUrl: Swift.String?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - code:
                    ///   - message:
                    ///   - documentationUrl:
                    package init(
                        code: Swift.String? = nil,
                        message: Swift.String? = nil,
                        documentationUrl: Swift.String? = nil
                    ) {
                        self.code = code
                        self.message = message
                        self.documentationUrl = documentationUrl
                    }
                    package enum CodingKeys: String, CodingKey {
                        case code
                        case message
                        case documentationUrl = "documentation_url"
                    }
                }
                /// - Remark: Generated from `#/components/responses/service_unavailable/content/application\/json`.
                case json(Components.Responses.ServiceUnavailable.Body.JsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Responses.ServiceUnavailable.Body.JsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.ServiceUnavailable.Body
            /// Creates a new `ServiceUnavailable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.ServiceUnavailable.Body) {
                self.body = body
            }
        }
        package struct MovedPermanently: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/moved_permanently/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/moved_permanently/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.MovedPermanently.Body
            /// Creates a new `MovedPermanently`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.MovedPermanently.Body) {
                self.body = body
            }
        }
        package struct InternalError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/internal_error/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/internal_error/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.InternalError.Body
            /// Creates a new `InternalError`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.InternalError.Body) {
                self.body = body
            }
        }
        package struct Gone: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/gone/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/gone/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Gone.Body
            /// Creates a new `Gone`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Gone.Body) {
                self.body = body
            }
        }
        package struct Unacceptable: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/unacceptable/content`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/unacceptable/content/application\/json`.
                case json(Components.Schemas.BasicError)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                package var json: Components.Schemas.BasicError {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            package var body: Components.Responses.Unacceptable.Body
            /// Creates a new `Unacceptable`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            package init(body: Components.Responses.Unacceptable.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    package enum Headers {
        /// - Remark: Generated from `#/components/headers/link`.
        package typealias Link = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
package enum Operations {
    /// Create an installation access token for an app
    ///
    /// Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
    ///
    /// Optionally, you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
    ///
    /// Optionally, use the `permissions` body parameter to specify the permissions that the installation access token should have. If `permissions` is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
    ///
    /// You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
    ///
    /// - Remark: HTTP `POST /app/installations/{installation_id}/access_tokens`.
    /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)`.
    package enum AppsCreateInstallationAccessToken {
        package static let id: Swift.String = "apps/create-installation-access-token"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the installation.
                ///
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/path/installation_id`.
                package var installationId: Components.Parameters.InstallationId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - installationId: The unique identifier of the installation.
                package init(installationId: Components.Parameters.InstallationId) {
                    self.installationId = installationId
                }
            }
            package var path: Operations.AppsCreateInstallationAccessToken.Input.Path
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsCreateInstallationAccessToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.AppsCreateInstallationAccessToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.AppsCreateInstallationAccessToken.Input.Headers
            /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// List of repository names that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repositories`.
                    package var repositories: [Swift.String]?
                    /// List of repository IDs that the token should have access to
                    ///
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/repository_ids`.
                    package var repositoryIds: [Swift.Int]?
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/json/permissions`.
                    package var permissions: Components.Schemas.AppPermissions?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - repositories: List of repository names that the token should have access to
                    ///   - repositoryIds: List of repository IDs that the token should have access to
                    ///   - permissions:
                    package init(
                        repositories: [Swift.String]? = nil,
                        repositoryIds: [Swift.Int]? = nil,
                        permissions: Components.Schemas.AppPermissions? = nil
                    ) {
                        self.repositories = repositories
                        self.repositoryIds = repositoryIds
                        self.permissions = permissions
                    }
                    package enum CodingKeys: String, CodingKey {
                        case repositories
                        case repositoryIds = "repository_ids"
                        case permissions
                    }
                }
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/requestBody/content/application\/json`.
                case json(Operations.AppsCreateInstallationAccessToken.Input.Body.JsonPayload)
            }
            package var body: Operations.AppsCreateInstallationAccessToken.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.AppsCreateInstallationAccessToken.Input.Path,
                headers: Operations.AppsCreateInstallationAccessToken.Input.Headers = .init(),
                body: Operations.AppsCreateInstallationAccessToken.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/app/installations/{installation_id}/access_tokens/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.InstallationToken)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.InstallationToken {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.AppsCreateInstallationAccessToken.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.AppsCreateInstallationAccessToken.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.AppsCreateInstallationAccessToken.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.AppsCreateInstallationAccessToken.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//app/installations/{installation_id}/access_tokens/post(apps/create-installation-access-token)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Delete a project card
    ///
    /// Deletes a project card
    ///
    /// - Remark: HTTP `DELETE /projects/columns/cards/{card_id}`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)`.
    package enum ProjectsDeleteCard {
        package static let id: Swift.String = "projects/delete-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/path/card_id`.
                package var cardId: Components.Parameters.CardId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - cardId: The unique identifier of the card.
                package init(cardId: Components.Parameters.CardId) {
                    self.cardId = cardId
                }
            }
            package var path: Operations.ProjectsDeleteCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDeleteCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsDeleteCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsDeleteCard.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ProjectsDeleteCard.Input.Path,
                headers: Operations.ProjectsDeleteCard.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ProjectsDeleteCard.Output.NoContent)
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ProjectsDeleteCard.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/json/errors`.
                        package var errors: [Swift.String]?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: [Swift.String]? = nil
                        ) {
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/DELETE/responses/403/content/application\/json`.
                    case json(Operations.ProjectsDeleteCard.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsDeleteCard.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsDeleteCard.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsDeleteCard.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProjectsDeleteCard.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.ProjectsDeleteCard.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/delete(projects/delete-card)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Move a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/cards/{card_id}/moves`.
    /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)`.
    package enum ProjectsMoveCard {
        package static let id: Swift.String = "projects/move-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the card.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/path/card_id`.
                package var cardId: Components.Parameters.CardId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - cardId: The unique identifier of the card.
                package init(cardId: Components.Parameters.CardId) {
                    self.cardId = cardId
                }
            }
            package var path: Operations.ProjectsMoveCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsMoveCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsMoveCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsMoveCard.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json/position`.
                    package var position: Swift.String
                    /// The unique identifier of the column the card should be moved to
                    ///
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/json/column_id`.
                    package var columnId: Swift.Int?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - position: The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
                    ///   - columnId: The unique identifier of the column the card should be moved to
                    package init(
                        position: Swift.String,
                        columnId: Swift.Int? = nil
                    ) {
                        self.position = position
                        self.columnId = columnId
                    }
                    package enum CodingKeys: String, CodingKey {
                        case position
                        case columnId = "column_id"
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/requestBody/content/application\/json`.
                case json(Operations.ProjectsMoveCard.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsMoveCard.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsMoveCard.Input.Path,
                headers: Operations.ProjectsMoveCard.Input.Headers = .init(),
                body: Operations.ProjectsMoveCard.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// Creates a new `JsonPayload`.
                        package init() {}
                        package init(from decoder: any Decoder) throws {
                            try decoder.ensureNoAdditionalProperties(knownKeys: [])
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/201/content/application\/json`.
                    case json(Operations.ProjectsMoveCard.Output.Created.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsMoveCard.Output.Created.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsMoveCard.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsMoveCard.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ProjectsMoveCard.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ProjectsMoveCard.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            package struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload`.
                        package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/message`.
                            package var message: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/resource`.
                            package var resource: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/ErrorsPayload/field`.
                            package var field: Swift.String?
                            /// Creates a new `ErrorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            ///   - resource:
                            ///   - field:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil,
                                resource: Swift.String? = nil,
                                field: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                                self.resource = resource
                                self.field = field
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                                case resource
                                case field
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errors`.
                        package typealias ErrorsPayload = [Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload.ErrorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/json/errors`.
                        package var errors: Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload.ErrorsPayload?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload.ErrorsPayload? = nil
                        ) {
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/403/content/application\/json`.
                    case json(Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsMoveCard.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsMoveCard.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsMoveCard.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.ProjectsMoveCard.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Operations.ProjectsMoveCard.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/code`.
                        package var code: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/ErrorsPayload`.
                        package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/ErrorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/ErrorsPayload/message`.
                            package var message: Swift.String?
                            /// Creates a new `ErrorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errors`.
                        package typealias ErrorsPayload = [Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/json/errors`.
                        package var errors: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - code:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            code: Swift.String? = nil,
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload? = nil
                        ) {
                            self.code = code
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case code
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/cards/{card_id}/moves/POST/responses/503/content/application\/json`.
                    case json(Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsMoveCard.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ProjectsMoveCard.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ProjectsMoveCard.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//projects/columns/cards/{card_id}/moves/post(projects/move-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List project cards
    ///
    /// Lists the project cards in a project.
    ///
    /// - Remark: HTTP `GET /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)`.
    package enum ProjectsListCards {
        package static let id: Swift.String = "projects/list-cards"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsListCards.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query`.
            package struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/archived_state`.
                @frozen package enum ArchivedStatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case all = "all"
                    case archived = "archived"
                    case notArchived = "not_archived"
                }
                /// Filters the project cards that are returned by the card's state.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/archived_state`.
                package var archivedState: Operations.ProjectsListCards.Input.Query.ArchivedStatePayload?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - archivedState: Filters the project cards that are returned by the card's state.
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    archivedState: Operations.ProjectsListCards.Input.Query.ArchivedStatePayload? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.archivedState = archivedState
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ProjectsListCards.Input.Query
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListCards.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsListCards.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsListCards.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ProjectsListCards.Input.Path,
                query: Operations.ProjectsListCards.Input.Query = .init(),
                headers: Operations.ProjectsListCards.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ProjectsListCards.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProjectCard])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.ProjectCard] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsListCards.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ProjectsListCards.Output.Ok.Headers = .init(),
                    body: Operations.ProjectsListCards.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ProjectsListCards.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ProjectsListCards.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/get(projects/list-cards)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a project card
    ///
    ///
    ///
    /// - Remark: HTTP `POST /projects/columns/{column_id}/cards`.
    /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)`.
    package enum ProjectsCreateCard {
        package static let id: Swift.String = "projects/create-card"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The unique identifier of the column.
                ///
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/path/column_id`.
                package var columnId: Components.Parameters.ColumnId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - columnId: The unique identifier of the column.
                package init(columnId: Components.Parameters.ColumnId) {
                    self.columnId = columnId
                }
            }
            package var path: Operations.ProjectsCreateCard.Input.Path
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsCreateCard.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ProjectsCreateCard.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ProjectsCreateCard.Input.Headers
            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json`.
                @frozen package enum JsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1`.
                    package struct Case1Payload: Codable, Hashable, Sendable {
                        /// The project card's note
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1/note`.
                        package var note: Swift.String?
                        /// Creates a new `Case1Payload`.
                        ///
                        /// - Parameters:
                        ///   - note: The project card's note
                        package init(note: Swift.String? = nil) {
                            self.note = note
                        }
                        package enum CodingKeys: String, CodingKey {
                            case note
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case1`.
                    case case1(Operations.ProjectsCreateCard.Input.Body.JsonPayload.Case1Payload)
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2`.
                    package struct Case2Payload: Codable, Hashable, Sendable {
                        /// The unique identifier of the content associated with the card
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2/content_id`.
                        package var contentId: Swift.Int
                        /// The piece of content associated with the card
                        ///
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2/content_type`.
                        package var contentType: Swift.String
                        /// Creates a new `Case2Payload`.
                        ///
                        /// - Parameters:
                        ///   - contentId: The unique identifier of the content associated with the card
                        ///   - contentType: The piece of content associated with the card
                        package init(
                            contentId: Swift.Int,
                            contentType: Swift.String
                        ) {
                            self.contentId = contentId
                            self.contentType = contentType
                        }
                        package enum CodingKeys: String, CodingKey {
                            case contentId = "content_id"
                            case contentType = "content_type"
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/json/case2`.
                    case case2(Operations.ProjectsCreateCard.Input.Body.JsonPayload.Case2Payload)
                    package init(from decoder: any Decoder) throws {
                        var errors: [any Error] = []
                        do {
                            self = .case1(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        do {
                            self = .case2(try .init(from: decoder))
                            return
                        } catch {
                            errors.append(error)
                        }
                        throw Swift.DecodingError.failedToDecodeOneOfSchema(
                            type: Self.self,
                            codingPath: decoder.codingPath,
                            errors: errors
                        )
                    }
                    package func encode(to encoder: any Encoder) throws {
                        switch self {
                        case let .case1(value):
                            try value.encode(to: encoder)
                        case let .case2(value):
                            try value.encode(to: encoder)
                        }
                    }
                }
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/requestBody/content/application\/json`.
                case json(Operations.ProjectsCreateCard.Input.Body.JsonPayload)
            }
            package var body: Operations.ProjectsCreateCard.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ProjectsCreateCard.Input.Path,
                headers: Operations.ProjectsCreateCard.Input.Headers = .init(),
                body: Operations.ProjectsCreateCard.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.ProjectCard)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.ProjectCard {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsCreateCard.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsCreateCard.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ProjectsCreateCard.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ProjectsCreateCard.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Requires authentication
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.RequiresAuthentication)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            package var unauthorized: Components.Responses.RequiresAuthentication {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            package struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json`.
                    @frozen package enum JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json/case1`.
                        case ValidationError(Components.Schemas.ValidationError)
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/json/case2`.
                        case ValidationErrorSimple(Components.Schemas.ValidationErrorSimple)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .ValidationError(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .ValidationErrorSimple(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .ValidationError(value):
                                try value.encode(to: encoder)
                            case let .ValidationErrorSimple(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/422/content/application\/json`.
                    case json(Operations.ProjectsCreateCard.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsCreateCard.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsCreateCard.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsCreateCard.Output.UnprocessableContent.Body) {
                    self.body = body
                }
            }
            /// Validation failed
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.ProjectsCreateCard.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Operations.ProjectsCreateCard.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            package struct ServiceUnavailable: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json`.
                    package struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/code`.
                        package var code: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/message`.
                        package var message: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/documentation_url`.
                        package var documentationUrl: Swift.String?
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/ErrorsPayload`.
                        package struct ErrorsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/ErrorsPayload/code`.
                            package var code: Swift.String?
                            /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/ErrorsPayload/message`.
                            package var message: Swift.String?
                            /// Creates a new `ErrorsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            package init(
                                code: Swift.String? = nil,
                                message: Swift.String? = nil
                            ) {
                                self.code = code
                                self.message = message
                            }
                            package enum CodingKeys: String, CodingKey {
                                case code
                                case message
                            }
                        }
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errors`.
                        package typealias ErrorsPayload = [Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayloadPayload]
                        /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/json/errors`.
                        package var errors: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - code:
                        ///   - message:
                        ///   - documentationUrl:
                        ///   - errors:
                        package init(
                            code: Swift.String? = nil,
                            message: Swift.String? = nil,
                            documentationUrl: Swift.String? = nil,
                            errors: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload.ErrorsPayload? = nil
                        ) {
                            self.code = code
                            self.message = message
                            self.documentationUrl = documentationUrl
                            self.errors = errors
                        }
                        package enum CodingKeys: String, CodingKey {
                            case code
                            case message
                            case documentationUrl = "documentation_url"
                            case errors
                        }
                    }
                    /// - Remark: Generated from `#/paths/projects/columns/{column_id}/cards/POST/responses/503/content/application\/json`.
                    case json(Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body
                /// Creates a new `ServiceUnavailable`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ProjectsCreateCard.Output.ServiceUnavailable.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//projects/columns/{column_id}/cards/post(projects/create-card)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Operations.ProjectsCreateCard.Output.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Operations.ProjectsCreateCard.Output.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List commits
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    /// | `verified_at` | `string` | The date the signature was verified by GitHub. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)`.
    package enum ReposListCommits {
        package static let id: Swift.String = "repos/list-commits"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListCommits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query`.
            package struct Query: Sendable, Hashable {
                /// SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/sha`.
                package var sha: Swift.String?
                /// Only commits containing this file path will be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/path`.
                package var path: Swift.String?
                /// GitHub username or email address to use to filter by commit author.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/author`.
                package var author: Swift.String?
                /// GitHub username or email address to use to filter by commit committer.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/committer`.
                package var committer: Swift.String?
                /// Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/since`.
                package var since: Foundation.Date?
                /// Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/until`.
                package var until: Foundation.Date?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - sha: SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
                ///   - path: Only commits containing this file path will be returned.
                ///   - author: GitHub username or email address to use to filter by commit author.
                ///   - committer: GitHub username or email address to use to filter by commit committer.
                ///   - since: Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///   - until: Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    sha: Swift.String? = nil,
                    path: Swift.String? = nil,
                    author: Swift.String? = nil,
                    committer: Swift.String? = nil,
                    since: Foundation.Date? = nil,
                    until: Foundation.Date? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.sha = sha
                    self.path = path
                    self.author = author
                    self.committer = committer
                    self.since = since
                    self.until = until
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListCommits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListCommits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListCommits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListCommits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListCommits.Input.Path,
                query: Operations.ReposListCommits.Input.Query = .init(),
                headers: Operations.ReposListCommits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListCommits.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Commit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Commit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListCommits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListCommits.Output.Ok.Headers = .init(),
                    body: Operations.ReposListCommits.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListCommits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListCommits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/get(repos/list-commits)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case applicationScimJson
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .applicationScimJson
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .applicationScimJson:
                    return "application/scim+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .applicationScimJson
                ]
            }
        }
    }
    /// List pull requests associated with a commit
    ///
    /// Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
    ///
    /// To list the open or merged pull requests associated with a branch, you can set the `commit_sha` parameter to the branch name.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)`.
    package enum ReposListPullRequestsAssociatedWithCommit {
        package static let id: Swift.String = "repos/list-pull-requests-associated-with-commit"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The SHA of the commit.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/path/commit_sha`.
                package var commitSha: Components.Parameters.CommitSha
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - commitSha: The SHA of the commit.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    commitSha: Components.Parameters.CommitSha
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.commitSha = commitSha
                }
            }
            package var path: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListPullRequestsAssociatedWithCommit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListPullRequestsAssociatedWithCommit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Path,
                query: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Query = .init(),
                headers: Operations.ReposListPullRequestsAssociatedWithCommit.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/commits/{commit_sha}/pulls/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PullRequestSimple])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.PullRequestSimple] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Headers = .init(),
                    body: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListPullRequestsAssociatedWithCommit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/commits/{commit_sha}/pulls/get(repos/list-pull-requests-associated-with-commit)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            package var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Compare two commits
    ///
    /// Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
    ///
    /// This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.diff`**: Returns the diff of the commit.
    /// - **`application/vnd.github.patch`**: Returns the patch of the commit. Diffs with binary data will have no `patch` property.
    ///
    /// The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
    ///
    /// When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
    ///
    /// **Working with large comparisons**
    ///
    /// To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
    ///
    /// - The list of changed files is only shown on the first page of results, and it includes up to 300 changed files for the entire comparison.
    /// - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
    ///
    /// For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
    ///
    /// **Signature verification object**
    ///
    /// The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
    ///
    /// | Name | Type | Description |
    /// | ---- | ---- | ----------- |
    /// | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
    /// | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
    /// | `signature` | `string` | The signature that was extracted from the commit. |
    /// | `payload` | `string` | The value that was signed. |
    /// | `verified_at` | `string` | The date the signature was verified by GitHub. |
    ///
    /// These are the possible values for `reason` in the `verification` object:
    ///
    /// | Value | Description |
    /// | ----- | ----------- |
    /// | `expired_key` | The key that made the signature is expired. |
    /// | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
    /// | `gpgverify_error` | There was an error communicating with the signature verification service. |
    /// | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
    /// | `unsigned` | The object does not include a signature. |
    /// | `unknown_signature_type` | A non-PGP signature was found in the commit. |
    /// | `no_user` | No user was associated with the `committer` email address in the commit. |
    /// | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
    /// | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
    /// | `unknown_key` | The key that made the signature has not been registered with any user's account. |
    /// | `malformed_signature` | There was an error parsing the signature. |
    /// | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
    /// | `valid` | None of the above errors applied, so the signature is considered to be verified. |
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/compare/{basehead}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)`.
    package enum ReposCompareCommits {
        package static let id: Swift.String = "repos/compare-commits"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/path/basehead`.
                package var basehead: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - basehead: The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    basehead: Swift.String
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.basehead = basehead
                }
            }
            package var path: Operations.ReposCompareCommits.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    page: Components.Parameters.Page? = nil,
                    perPage: Components.Parameters.PerPage? = nil
                ) {
                    self.page = page
                    self.perPage = perPage
                }
            }
            package var query: Operations.ReposCompareCommits.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCompareCommits.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCompareCommits.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposCompareCommits.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposCompareCommits.Input.Path,
                query: Operations.ReposCompareCommits.Input.Query = .init(),
                headers: Operations.ReposCompareCommits.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/compare/{basehead}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommitComparison)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.CommitComparison {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposCompareCommits.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ReposCompareCommits.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposCompareCommits.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposCompareCommits.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/compare/{basehead}/get(repos/compare-commits)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository contributors
    ///
    /// Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
    ///
    /// GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/contributors`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)`.
    package enum ReposListContributors {
        package static let id: Swift.String = "repos/list-contributors"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListContributors.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query`.
            package struct Query: Sendable, Hashable {
                /// Set to `1` or `true` to include anonymous contributors in results.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/anon`.
                package var anon: Swift.String?
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - anon: Set to `1` or `true` to include anonymous contributors in results.
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    anon: Swift.String? = nil,
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.anon = anon
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListContributors.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListContributors.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListContributors.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListContributors.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListContributors.Input.Path,
                query: Operations.ReposListContributors.Input.Query = .init(),
                headers: Operations.ReposListContributors.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListContributors.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/contributors/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Contributor])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Contributor] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListContributors.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListContributors.Output.Ok.Headers = .init(),
                    body: Operations.ReposListContributors.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// If repository contains content
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListContributors.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListContributors.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            package struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                package init() {}
            }
            /// Response if repository is empty
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.ReposListContributors.Output.NoContent)
            /// Response if repository is empty
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            package static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            package var noContent: Operations.ReposListContributors.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/contributors/get(repos/list-contributors)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create an issue
    ///
    /// Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
    /// and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/issues`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)`.
    package enum IssuesCreate {
        package static let id: Swift.String = "issues/create"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.IssuesCreate.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesCreate.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    @frozen package enum TitlePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// The title of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/title`.
                    package var title: Operations.IssuesCreate.Input.Body.JsonPayload.TitlePayload
                    /// The contents of the issue.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/body`.
                    package var body: Swift.String?
                    /// Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignee`.
                    package var assignee: Swift.String?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    @frozen package enum MilestonePayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case1`.
                        case case1(Swift.String)
                        /// The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._
                        ///
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone/case2`.
                        case case2(Swift.Int)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try encoder.encodeToSingleValueContainer(value)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/milestone`.
                    package var milestone: Operations.IssuesCreate.Input.Body.JsonPayload.MilestonePayload?
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload`.
                    @frozen package enum LabelsPayloadPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case1`.
                        case case1(Swift.String)
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2`.
                        package struct Case2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/id`.
                            package var id: Swift.Int?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/name`.
                            package var name: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/description`.
                            package var description: Swift.String?
                            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2/color`.
                            package var color: Swift.String?
                            /// Creates a new `Case2Payload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - name:
                            ///   - description:
                            ///   - color:
                            package init(
                                id: Swift.Int? = nil,
                                name: Swift.String? = nil,
                                description: Swift.String? = nil,
                                color: Swift.String? = nil
                            ) {
                                self.id = id
                                self.name = name
                                self.description = description
                                self.color = color
                            }
                            package enum CodingKeys: String, CodingKey {
                                case id
                                case name
                                case description
                                case color
                            }
                        }
                        /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/LabelsPayload/case2`.
                        case case2(Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayloadPayload.Case2Payload)
                        package init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .case1(try decoder.decodeFromSingleValueContainer())
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .case2(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .case1(value):
                                try encoder.encodeToSingleValueContainer(value)
                            case let .case2(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    package typealias LabelsPayload = [Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayloadPayload]
                    /// Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/labels`.
                    package var labels: Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayload?
                    /// Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/json/assignees`.
                    package var assignees: [Swift.String]?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the issue.
                    ///   - body: The contents of the issue.
                    ///   - assignee: Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_
                    ///   - milestone:
                    ///   - labels: Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
                    ///   - assignees: Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
                    package init(
                        title: Operations.IssuesCreate.Input.Body.JsonPayload.TitlePayload,
                        body: Swift.String? = nil,
                        assignee: Swift.String? = nil,
                        milestone: Operations.IssuesCreate.Input.Body.JsonPayload.MilestonePayload? = nil,
                        labels: Operations.IssuesCreate.Input.Body.JsonPayload.LabelsPayload? = nil,
                        assignees: [Swift.String]? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.assignee = assignee
                        self.milestone = milestone
                        self.labels = labels
                        self.assignees = assignees
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case assignee
                        case milestone
                        case labels
                        case assignees
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/requestBody/content/application\/json`.
                case json(Operations.IssuesCreate.Input.Body.JsonPayload)
            }
            package var body: Operations.IssuesCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.IssuesCreate.Input.Path,
                headers: Operations.IssuesCreate.Input.Headers = .init(),
                body: Operations.IssuesCreate.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/headers/Location`.
                    package var location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - location:
                    package init(location: Swift.String? = nil) {
                        self.location = location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.IssuesCreate.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesCreate.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.IssuesCreate.Output.Created.Headers = .init(),
                    body: Operations.IssuesCreate.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.IssuesCreate.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.IssuesCreate.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            package var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/post(issues/create)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case applicationScimJson
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/scim+json":
                    self = .applicationScimJson
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .applicationScimJson:
                    return "application/scim+json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json,
                    .applicationScimJson
                ]
            }
        }
    }
    /// Get an issue
    ///
    /// The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue was
    /// [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
    /// the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
    /// returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
    /// access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
    /// to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
    ///
    /// > [!NOTE]
    /// > GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/issues/{issue_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)`.
    package enum IssuesGet {
        package static let id: Swift.String = "issues/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the issue.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/path/issue_number`.
                package var issueNumber: Components.Parameters.IssueNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - issueNumber: The number that identifies the issue.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    issueNumber: Components.Parameters.IssueNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.issueNumber = issueNumber
                }
            }
            package var path: Operations.IssuesGet.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.IssuesGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.IssuesGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.IssuesGet.Input.Path,
                headers: Operations.IssuesGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/issues/{issue_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Issue)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Issue {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.IssuesGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.IssuesGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.IssuesGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.IssuesGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Moved permanently
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/301`.
            ///
            /// HTTP response code: `301 movedPermanently`.
            case movedPermanently(Components.Responses.MovedPermanently)
            /// The associated value of the enum case if `self` is `.movedPermanently`.
            ///
            /// - Throws: An error if `self` is not `.movedPermanently`.
            /// - SeeAlso: `.movedPermanently`.
            package var movedPermanently: Components.Responses.MovedPermanently {
                get throws {
                    switch self {
                    case let .movedPermanently(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "movedPermanently",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Gone
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/410`.
            ///
            /// HTTP response code: `410 gone`.
            case gone(Components.Responses.Gone)
            /// The associated value of the enum case if `self` is `.gone`.
            ///
            /// - Throws: An error if `self` is not `.gone`.
            /// - SeeAlso: `.gone`.
            package var gone: Components.Responses.Gone {
                get throws {
                    switch self {
                    case let .gone(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "gone",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/issues/{issue_number}/get(issues/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// Lists details of a pull request by providing its number.
    ///
    /// When you get, [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
    ///
    /// The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
    ///
    /// The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
    ///
    /// *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
    /// *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
    /// *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
    ///
    /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    /// - **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/). Include the repository name and pull request ID in your message.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)`.
    package enum PullsGet {
        package static let id: Swift.String = "pulls/get"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsGet.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsGet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsGet.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsGet.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.PullsGet.Input.Path,
                headers: Operations.PullsGet.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.PullRequest)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.PullRequest {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsGet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PullsGet.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Pass the appropriate [media type](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types) to fetch diff and patch formats.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsGet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsGet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            case notModified(Components.Responses.NotModified)
            /// Not modified
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/304`.
            ///
            /// HTTP response code: `304 notModified`.
            package static var notModified: Self {
                .notModified(.init())
            }
            /// The associated value of the enum case if `self` is `.notModified`.
            ///
            /// - Throws: An error if `self` is not `.notModified`.
            /// - SeeAlso: `.notModified`.
            package var notModified: Components.Responses.NotModified {
                get throws {
                    switch self {
                    case let .notModified(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notModified",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Unacceptable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/406`.
            ///
            /// HTTP response code: `406 notAcceptable`.
            case notAcceptable(Components.Responses.Unacceptable)
            /// The associated value of the enum case if `self` is `.notAcceptable`.
            ///
            /// - Throws: An error if `self` is not `.notAcceptable`.
            /// - SeeAlso: `.notAcceptable`.
            package var notAcceptable: Components.Responses.Unacceptable {
                get throws {
                    switch self {
                    case let .notAcceptable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notAcceptable",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/get(pulls/get)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Update a pull request
    ///
    /// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
    ///
    /// To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `PATCH /repos/{owner}/{repo}/pulls/{pull_number}`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)`.
    package enum PullsUpdate {
        package static let id: Swift.String = "pulls/update"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsUpdate.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The title of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/title`.
                    package var title: Swift.String?
                    /// The contents of the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/body`.
                    package var body: Swift.String?
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    @frozen package enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case open = "open"
                        case closed = "closed"
                    }
                    /// State of this Pull Request. Either `open` or `closed`.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/state`.
                    package var state: Operations.PullsUpdate.Input.Body.JsonPayload.StatePayload?
                    /// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/base`.
                    package var base: Swift.String?
                    /// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/json/maintainer_can_modify`.
                    package var maintainerCanModify: Swift.Bool?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - title: The title of the pull request.
                    ///   - body: The contents of the pull request.
                    ///   - state: State of this Pull Request. Either `open` or `closed`.
                    ///   - base: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
                    ///   - maintainerCanModify: Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
                    package init(
                        title: Swift.String? = nil,
                        body: Swift.String? = nil,
                        state: Operations.PullsUpdate.Input.Body.JsonPayload.StatePayload? = nil,
                        base: Swift.String? = nil,
                        maintainerCanModify: Swift.Bool? = nil
                    ) {
                        self.title = title
                        self.body = body
                        self.state = state
                        self.base = base
                        self.maintainerCanModify = maintainerCanModify
                    }
                    package enum CodingKeys: String, CodingKey {
                        case title
                        case body
                        case state
                        case base
                        case maintainerCanModify = "maintainer_can_modify"
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/requestBody/content/application\/json`.
                case json(Operations.PullsUpdate.Input.Body.JsonPayload)
            }
            package var body: Operations.PullsUpdate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.PullsUpdate.Input.Path,
                headers: Operations.PullsUpdate.Input.Headers = .init(),
                body: Operations.PullsUpdate.Input.Body? = nil
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.PullRequest)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.PullRequest {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.PullsUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/patch(pulls/update)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            package var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List pull requests files
    ///
    /// Lists the files in a specified pull request.
    ///
    /// > [!NOTE]
    /// > Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/files`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)`.
    package enum PullsListFiles {
        package static let id: Swift.String = "pulls/list-files"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsListFiles.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.PullsListFiles.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListFiles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListFiles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsListFiles.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PullsListFiles.Input.Path,
                query: Operations.PullsListFiles.Input.Query = .init(),
                headers: Operations.PullsListFiles.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PullsListFiles.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/files/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.DiffEntry])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.DiffEntry] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsListFiles.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.PullsListFiles.Output.Ok.Headers = .init(),
                    body: Operations.PullsListFiles.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsListFiles.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsListFiles.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Internal Error
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            package var internalServerError: Components.Responses.InternalError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Service unavailable
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/files/get(pulls/list-files)/responses/503`.
            ///
            /// HTTP response code: `503 serviceUnavailable`.
            case serviceUnavailable(Components.Responses.ServiceUnavailable)
            /// The associated value of the enum case if `self` is `.serviceUnavailable`.
            ///
            /// - Throws: An error if `self` is not `.serviceUnavailable`.
            /// - SeeAlso: `.serviceUnavailable`.
            package var serviceUnavailable: Components.Responses.ServiceUnavailable {
                get throws {
                    switch self {
                    case let .serviceUnavailable(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "serviceUnavailable",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List reviews for a pull request
    ///
    /// Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
    ///
    /// This endpoint supports the following custom media types. For more information, see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
    ///
    /// - **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default if you do not pass any specific media type.
    /// - **`application/vnd.github-commitcomment.text+json`**: Returns a text only representation of the markdown body. Response will include `body_text`.
    /// - **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will include `body_html`.
    /// - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)`.
    package enum PullsListReviews {
        package static let id: Swift.String = "pulls/list-reviews"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// The number that identifies the pull request.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/path/pull_number`.
                package var pullNumber: Components.Parameters.PullNumber
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                ///   - pullNumber: The number that identifies the pull request.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo,
                    pullNumber: Components.Parameters.PullNumber
                ) {
                    self.owner = owner
                    self.repo = repo
                    self.pullNumber = pullNumber
                }
            }
            package var path: Operations.PullsListReviews.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.PullsListReviews.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListReviews.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PullsListReviews.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.PullsListReviews.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.PullsListReviews.Input.Path,
                query: Operations.PullsListReviews.Input.Query = .init(),
                headers: Operations.PullsListReviews.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.PullsListReviews.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/pulls/{pull_number}/reviews/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PullRequestReview])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.PullRequestReview] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.PullsListReviews.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.PullsListReviews.Output.Ok.Headers = .init(),
                    body: Operations.PullsListReviews.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of reviews returns in chronological order.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/pulls/{pull_number}/reviews/get(pulls/list-reviews)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.PullsListReviews.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.PullsListReviews.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List releases
    ///
    /// This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).
    ///
    /// Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)`.
    package enum ReposListReleases {
        package static let id: Swift.String = "repos/list-releases"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListReleases.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListReleases.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListReleases.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListReleases.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListReleases.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListReleases.Input.Path,
                query: Operations.ReposListReleases.Input.Query = .init(),
                headers: Operations.ReposListReleases.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListReleases.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Release])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Release] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListReleases.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListReleases.Output.Ok.Headers = .init(),
                    body: Operations.ReposListReleases.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListReleases.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListReleases.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/get(repos/list-releases)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Create a release
    ///
    /// Users with push access to the repository can create a release.
    ///
    /// This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
    ///
    /// - Remark: HTTP `POST /repos/{owner}/{repo}/releases`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)`.
    package enum ReposCreateRelease {
        package static let id: Swift.String = "repos/create-release"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposCreateRelease.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCreateRelease.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposCreateRelease.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposCreateRelease.Input.Headers
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody`.
            @frozen package enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json`.
                package struct JsonPayload: Codable, Hashable, Sendable {
                    /// The name of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/tag_name`.
                    package var tagName: Swift.String
                    /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/target_commitish`.
                    package var targetCommitish: Swift.String?
                    /// The name of the release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/name`.
                    package var name: Swift.String?
                    /// Text describing the contents of the tag.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/body`.
                    package var body: Swift.String?
                    /// `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/draft`.
                    package var draft: Swift.Bool?
                    /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/prerelease`.
                    package var prerelease: Swift.Bool?
                    /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/discussion_category_name`.
                    package var discussionCategoryName: Swift.String?
                    /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/generate_release_notes`.
                    package var generateReleaseNotes: Swift.Bool?
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    @frozen package enum MakeLatestPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case _true = "true"
                        case _false = "false"
                        case legacy = "legacy"
                    }
                    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    ///
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/json/make_latest`.
                    package var makeLatest: Operations.ReposCreateRelease.Input.Body.JsonPayload.MakeLatestPayload?
                    /// Creates a new `JsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - tagName: The name of the tag.
                    ///   - targetCommitish: Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
                    ///   - name: The name of the release.
                    ///   - body: Text describing the contents of the tag.
                    ///   - draft: `true` to create a draft (unpublished) release, `false` to create a published one.
                    ///   - prerelease: `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                    ///   - discussionCategoryName: If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
                    ///   - generateReleaseNotes: Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
                    ///   - makeLatest: Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
                    package init(
                        tagName: Swift.String,
                        targetCommitish: Swift.String? = nil,
                        name: Swift.String? = nil,
                        body: Swift.String? = nil,
                        draft: Swift.Bool? = nil,
                        prerelease: Swift.Bool? = nil,
                        discussionCategoryName: Swift.String? = nil,
                        generateReleaseNotes: Swift.Bool? = nil,
                        makeLatest: Operations.ReposCreateRelease.Input.Body.JsonPayload.MakeLatestPayload? = nil
                    ) {
                        self.tagName = tagName
                        self.targetCommitish = targetCommitish
                        self.name = name
                        self.body = body
                        self.draft = draft
                        self.prerelease = prerelease
                        self.discussionCategoryName = discussionCategoryName
                        self.generateReleaseNotes = generateReleaseNotes
                        self.makeLatest = makeLatest
                    }
                    package enum CodingKeys: String, CodingKey {
                        case tagName = "tag_name"
                        case targetCommitish = "target_commitish"
                        case name
                        case body
                        case draft
                        case prerelease
                        case discussionCategoryName = "discussion_category_name"
                        case generateReleaseNotes = "generate_release_notes"
                        case makeLatest = "make_latest"
                    }
                }
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/requestBody/content/application\/json`.
                case json(Operations.ReposCreateRelease.Input.Body.JsonPayload)
            }
            package var body: Operations.ReposCreateRelease.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            package init(
                path: Operations.ReposCreateRelease.Input.Path,
                headers: Operations.ReposCreateRelease.Input.Headers = .init(),
                body: Operations.ReposCreateRelease.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/headers/Location`.
                    package var location: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - location:
                    package init(location: Swift.String? = nil) {
                        self.location = location
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposCreateRelease.Output.Created.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.Release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposCreateRelease.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposCreateRelease.Output.Created.Headers = .init(),
                    body: Operations.ReposCreateRelease.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.ReposCreateRelease.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            package var created: Operations.ReposCreateRelease.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            package struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.BasicError)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.BasicError {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposCreateRelease.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ReposCreateRelease.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Not Found if the discussion category name is invalid
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.ReposCreateRelease.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Operations.ReposCreateRelease.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Validation failed, or the endpoint has been spammed.
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/post(repos/create-release)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Components.Responses.ValidationFailed)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            package var unprocessableContent: Components.Responses.ValidationFailed {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get the latest release
    ///
    /// View the latest published full release for the repository.
    ///
    /// The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/releases/latest`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)`.
    package enum ReposGetLatestRelease {
        package static let id: Swift.String = "repos/get-latest-release"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposGetLatestRelease.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposGetLatestRelease.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposGetLatestRelease.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposGetLatestRelease.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.ReposGetLatestRelease.Input.Path,
                headers: Operations.ReposGetLatestRelease.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/releases/latest/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Release)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Components.Schemas.Release {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposGetLatestRelease.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.ReposGetLatestRelease.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/releases/latest/get(repos/get-latest-release)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposGetLatestRelease.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposGetLatestRelease.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// List repository tags
    ///
    ///
    ///
    /// - Remark: HTTP `GET /repos/{owner}/{repo}/tags`.
    /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)`.
    package enum ReposListTags {
        package static let id: Swift.String = "repos/list-tags"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The account owner of the repository. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/owner`.
                package var owner: Components.Parameters.Owner
                /// The name of the repository without the `.git` extension. The name is not case sensitive.
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/path/repo`.
                package var repo: Components.Parameters.Repo
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - owner: The account owner of the repository. The name is not case sensitive.
                ///   - repo: The name of the repository without the `.git` extension. The name is not case sensitive.
                package init(
                    owner: Components.Parameters.Owner,
                    repo: Components.Parameters.Repo
                ) {
                    self.owner = owner
                    self.repo = repo
                }
            }
            package var path: Operations.ReposListTags.Input.Path
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query`.
            package struct Query: Sendable, Hashable {
                /// The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/per_page`.
                package var perPage: Components.Parameters.PerPage?
                /// The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/query/page`.
                package var page: Components.Parameters.Page?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - perPage: The number of results per page (max 100). For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                ///   - page: The page number of the results to fetch. For more information, see "[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api)."
                package init(
                    perPage: Components.Parameters.PerPage? = nil,
                    page: Components.Parameters.Page? = nil
                ) {
                    self.perPage = perPage
                    self.page = page
                }
            }
            package var query: Operations.ReposListTags.Input.Query
            /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListTags.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ReposListTags.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.ReposListTags.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            package init(
                path: Operations.ReposListTags.Input.Path,
                query: Operations.ReposListTags.Input.Query = .init(),
                headers: Operations.ReposListTags.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers`.
                package struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/headers/Link`.
                    package var link: Components.Headers.Link?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - link:
                    package init(link: Components.Headers.Link? = nil) {
                        self.link = link
                    }
                }
                /// Received HTTP response headers
                package var headers: Operations.ReposListTags.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/repos/{owner}/{repo}/tags/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Tag])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: [Components.Schemas.Tag] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.ReposListTags.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                package init(
                    headers: Operations.ReposListTags.Output.Ok.Headers = .init(),
                    body: Operations.ReposListTags.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//repos/{owner}/{repo}/tags/get(repos/list-tags)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ReposListTags.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.ReposListTags.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get a user
    ///
    /// Provides publicly available information about someone with a GitHub account.
    ///
    /// The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
    ///
    /// The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/users/emails)".
    ///
    /// - Remark: HTTP `GET /users/{username}`.
    /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)`.
    package enum UsersGetByUsername {
        package static let id: Swift.String = "users/get-by-username"
        package struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/{username}/GET/path`.
            package struct Path: Sendable, Hashable {
                /// The handle for the GitHub user account.
                ///
                /// - Remark: Generated from `#/paths/users/{username}/GET/path/username`.
                package var username: Components.Parameters.Username
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - username: The handle for the GitHub user account.
                package init(username: Components.Parameters.Username) {
                    self.username = username
                }
            }
            package var path: Operations.UsersGetByUsername.Input.Path
            /// - Remark: Generated from `#/paths/users/{username}/GET/header`.
            package struct Headers: Sendable, Hashable {
                package var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersGetByUsername.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                package init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.UsersGetByUsername.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            package var headers: Operations.UsersGetByUsername.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            package init(
                path: Operations.UsersGetByUsername.Input.Path,
                headers: Operations.UsersGetByUsername.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen package enum Output: Sendable, Hashable {
            package struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content`.
                @frozen package enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/json`.
                    @frozen package enum JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/json/PrivateUser`.
                        case _private(Components.Schemas.PrivateUser)
                        /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/json/PublicUser`.
                        case _public(Components.Schemas.PublicUser)
                        package enum CodingKeys: String, CodingKey {
                            case userViewType = "user_view_type"
                        }
                        package init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            let discriminator = try container.decode(
                                Swift.String.self,
                                forKey: .userViewType
                            )
                            switch discriminator {
                            case "private":
                                self = ._private(try .init(from: decoder))
                            case "public":
                                self = ._public(try .init(from: decoder))
                            default:
                                throw Swift.DecodingError.unknownOneOfDiscriminator(
                                    discriminatorKey: CodingKeys.userViewType,
                                    discriminatorValue: discriminator,
                                    codingPath: decoder.codingPath
                                )
                            }
                        }
                        package func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let ._private(value):
                                try value.encode(to: encoder)
                            case let ._public(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/{username}/GET/responses/200/content/application\/json`.
                    case json(Operations.UsersGetByUsername.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    package var json: Operations.UsersGetByUsername.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                package var body: Operations.UsersGetByUsername.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                package init(body: Operations.UsersGetByUsername.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Response
            ///
            /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.UsersGetByUsername.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            package var ok: Operations.UsersGetByUsername.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Resource not found
            ///
            /// - Remark: Generated from `#/paths//users/{username}/get(users/get-by-username)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            package var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen package enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            package init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            package var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            package static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
